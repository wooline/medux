{"version":3,"sources":["../../src/loading.ts"],"names":["MetaData","getModuleActionCreatorList","NSP","TaskCounter","TaskCountEvent","ActionTypes","loadings","depthTime","setLoadingDepthTime","second","setLoading","item","namespace","group","appModuleName","isServer","key","addListener","e","store","clientStore","actions","M_LOADING","action","data","dispatch","addItem"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,0BAAlB,EAA8CC,GAA9C,QAAwD,UAAxD;AACA,SAAQC,WAAR,EAAqBC,cAArB,QAA0C,UAA1C;AACA,SAAQC,WAAR,QAA0B,WAA1B;AAEA,MAAMC,QAA4C,GAAG,EAArD;AAEA,IAAIC,SAAS,GAAG,CAAhB;AAEA,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAA6C;AAClDF,EAAAA,SAAS,GAAGE,MAAZ;AACD;AACD,OAAO,SAASC,UAAT,CAA4CC,IAA5C,EAAqDC,SAArD,EAAiGC,KAAjG,EAA8H;AAAA,MAAzED,SAAyE;AAAzEA,IAAAA,SAAyE,GAArDZ,QAAQ,CAACc,aAA4C;AAAA;;AAAA,MAA7BD,KAA6B;AAA7BA,IAAAA,KAA6B,GAAb,QAAa;AAAA;;AACnI,MAAIb,QAAQ,CAACe,QAAb,EAAuB;AACrB,WAAOJ,IAAP;AACD;;AACD,QAAMK,GAAG,GAAGJ,SAAS,GAAGV,GAAZ,GAAkBW,KAA9B;;AACA,MAAI,CAACP,QAAQ,CAACU,GAAD,CAAb,EAAoB;AAClBV,IAAAA,QAAQ,CAACU,GAAD,CAAR,GAAgB,IAAIb,WAAJ,CAAgBI,SAAhB,CAAhB;AACAD,IAAAA,QAAQ,CAACU,GAAD,CAAR,CAAcC,WAAd,CAA0Bb,cAA1B,EAA0Cc,CAAC,IAAI;AAC7C,YAAMC,KAAK,GAAGnB,QAAQ,CAACoB,WAAvB;;AACA,UAAID,KAAJ,EAAW;AACT,cAAME,OAAO,GAAGpB,0BAA0B,CAACW,SAAD,CAA1B,CAAsCP,WAAW,CAACiB,SAAlD,CAAhB;AACA,cAAMC,MAAM,GAAGF,OAAO,CAAC;AAAC,WAACR,KAAD,GAASK,CAAC,CAACM;AAAZ,SAAD,CAAtB;AACAL,QAAAA,KAAK,CAACM,QAAN,CAAeF,MAAf;AACD;AACF,KAPD;AAQD;;AACDjB,EAAAA,QAAQ,CAACU,GAAD,CAAR,CAAcU,OAAd,CAAsBf,IAAtB;AACA,SAAOA,IAAP;AACD","sourcesContent":["import {MetaData, getModuleActionCreatorList, NSP} from './global';\nimport {TaskCounter, TaskCountEvent} from './sprite';\nimport {ActionTypes} from './actions';\n\nconst loadings: {[namespace: string]: TaskCounter} = {};\n\nlet depthTime = 2;\n\nexport function setLoadingDepthTime(second: number) {\n  depthTime = second;\n}\nexport function setLoading<T extends Promise<any>>(item: T, namespace: string = MetaData.appModuleName, group: string = 'global'): T {\n  if (MetaData.isServer) {\n    return item;\n  }\n  const key = namespace + NSP + group;\n  if (!loadings[key]) {\n    loadings[key] = new TaskCounter(depthTime);\n    loadings[key].addListener(TaskCountEvent, e => {\n      const store = MetaData.clientStore;\n      if (store) {\n        const actions = getModuleActionCreatorList(namespace)[ActionTypes.M_LOADING];\n        const action = actions({[group]: e.data});\n        store.dispatch(action);\n      }\n    });\n  }\n  loadings[key].addItem(item);\n  return item;\n}\n"],"file":"loading.js"}