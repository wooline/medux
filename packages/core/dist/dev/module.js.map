{"version":3,"sources":["../../src/module.ts"],"names":["reducer","getModuleActionCreatorList","isPromise","injectActions","MetaData","buildStore","errorAction","defineModuleGetter","getter","exportFacade","moduleName","actions","exportModule","initState","ActionHandles","views","model","store","hasInjected","_medux_","injectedModules","moduleState","getState","handlers","initAction","INIT","action","dispatch","Promise","resolve","BaseModelHandlers","presetData","isModule","callThisAction","handler","__actionName__","payload","UPDATE","LOADING","state","loading","updateState","prevState","currentState","isPromiseModule","module","isPromiseView","moduleView","loadModel","getModule","result","then","default","getView","viewName","getModuleByName","moduleGetter","getModuleListByNames","moduleNames","preModules","map","all","renderApp","render","appModuleName","storeOptions","ssrInitStoreKey","initData","window","reducers","middlewares","enhancers","preModuleNames","push","Object","keys","filter","key","appModule","initModel","renderSSR","catch","err"],"mappings":";;;;;;;;;;;;;;;AACA,SAAkDA,OAAlD,EAA2DC,0BAA3D,EAAmHC,SAAnH,EAA8HC,aAA9H,EAA6IC,QAA7I,QAA4J,SAA5J;AACA,SAAQC,UAAR,QAAyB,SAAzB;AACA,SAAQC,WAAR,QAA0B,WAA1B;AAoBA,OAAO,SAASC,kBAAT,CAA+EC,MAA/E,EAA0F;AAC/F,SAAOA,MAAP;AACD;AAUD,OAAO,SAASC,YAAT,CAAmDC,UAAnD,EAAuE;AAC5E,MAAMC,OAAU,GAAGV,0BAA0B,CAACS,UAAD,CAA7C;AACA,SAAO;AACLA,IAAAA,UAAU,EAAVA,UADK;AAELC,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID;AAQD,OAAO,IAAMC,YAA+B,GAAG,SAAlCA,YAAkC,CAACF,UAAD,EAAaG,SAAb,EAAwBC,aAAxB,EAAuCC,KAAvC,EAAiD;AAC9F,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAuB;AACnC,QAAMC,WAAW,GAAGD,KAAK,CAACE,OAAN,CAAcC,eAAd,CAA8BV,UAA9B,CAApB;;AACA,QAAI,CAACQ,WAAL,EAAkB;AAChBD,MAAAA,KAAK,CAACE,OAAN,CAAcC,eAAd,CAA8BV,UAA9B,IAA4C,IAA5C;AACA,UAAMW,WAA2B,GAAGJ,KAAK,CAACK,QAAN,GAAiBZ,UAAjB,CAApC;AACA,UAAMa,QAAQ,GAAG,IAAIT,aAAJ,CAAkBD,SAAlB,EAA6BQ,WAA7B,CAAjB;AACCE,MAAAA,QAAD,CAAkBb,UAAlB,GAA+BA,UAA/B;AACCa,MAAAA,QAAD,CAAkBN,KAAlB,GAA0BA,KAA1B;AACA,UAAMN,OAAO,GAAGR,aAAa,CAACc,KAAD,EAAQP,UAAR,EAAoBa,QAApB,CAA7B;AACCA,MAAAA,QAAD,CAAkBZ,OAAlB,GAA4BA,OAA5B;;AACA,UAAI,CAACU,WAAL,EAAkB;AAChB,YAAMG,UAAU,GAAGb,OAAO,CAACc,IAAR,CAAcF,QAAD,CAAkBV,SAA/B,CAAnB;AACA,YAAMa,MAAM,GAAGT,KAAK,CAACU,QAAN,CAAeH,UAAf,CAAf;;AACA,YAAItB,SAAS,CAACwB,MAAD,CAAb,EAAuB;AACrB,iBAAOA,MAAP;AACD,SAFD,MAEO;AACL,iBAAOE,OAAO,CAACC,OAAR,CAAgB,KAAK,CAArB,CAAP;AACD;AACF,OARD,MAQO;AACL,eAAOD,OAAO,CAACC,OAAR,CAAgB,KAAK,CAArB,CAAP;AACD;AACF,KAnBD,MAmBO;AACL,aAAOD,OAAO,CAACC,OAAR,CAAgB,KAAK,CAArB,CAAP;AACD;AACF,GAxBD;;AAyBAb,EAAAA,KAAK,CAACN,UAAN,GAAmBA,UAAnB;AACAM,EAAAA,KAAK,CAACH,SAAN,GAAkBA,SAAlB;AACA,SAAO;AACLH,IAAAA,UAAU,EAAVA,UADK;AAELM,IAAAA,KAAK,EAALA,KAFK;AAGLD,IAAAA,KAAK,EAALA;AAHK,GAAP;AAKD,CAjCM;AAmCP,WAAae,iBAAb;AAAA;AAAA;AAME;AACA,6BAAmBjB,SAAnB,EAAiCkB,UAAjC,EAAmD;AAAA,SANhClB,SAMgC;AAAA,SALhCH,UAKgC,GALX,EAKW;AAAA,SAJhCO,KAIgC,GAJZ,IAIY;AAAA,SAHhCN,OAGgC,GAHP,IAGO;AACjDE,IAAAA,SAAS,CAACmB,QAAV,GAAqB,IAArB;AACA,SAAKnB,SAAL,GAAiBA,SAAjB;AACD;;AAVH;;AAAA,SA4BYc,QA5BZ,GA4BE,kBAAmBD,MAAnB,EAA2D;AACzD,WAAO,KAAKT,KAAL,CAAWU,QAAX,CAAoBD,MAApB,CAAP;AACD,GA9BH;;AAAA,SAgCYO,cAhCZ,GAgCE,wBAA0CC,OAA1C,EAAoH;AAClH,QAAMvB,OAAO,GAAGV,0BAA0B,CAAC,KAAKS,UAAN,CAA1C;AACA,WAAOC,OAAO,CAAEuB,OAAD,CAA2BC,cAA5B,CAAP,kDAAP;AACD,GAnCH;;AAAA,SAsCYV,IAtCZ,GAqCE,cACeW,OADf,EAC8B;AAC5B,WAAOA,OAAP;AACD,GAxCH;;AAAA,SA2CYC,MA3CZ,GA0CE,gBACiBD,OADjB,EACgC;AAC9B,WAAOA,OAAP;AACD,GA7CH;;AAAA,SAgDYE,OAhDZ,GA+CE,iBACkBF,OADlB,EACyD;AACvD,QAAMG,KAAK,GAAG,KAAKA,KAAnB;;AACA,QAAI,CAACA,KAAL,EAAY;AACV,aAAOA,KAAP;AACD;;AACD,6BACKA,KADL;AAEEC,MAAAA,OAAO,oBAAMD,KAAK,CAACC,OAAZ,EAAwBJ,OAAxB;AAFT;AAID,GAzDH;;AAAA,SA2DYK,WA3DZ,GA2DE,qBAAsBL,OAAtB,EAA2C;AACzC,SAAKT,QAAL,CAAc,KAAKM,cAAL,CAAoB,KAAKI,MAAzB,oBAAqC,KAAKE,KAA1C,EAAoDH,OAApD,EAAd;AACD,GA7DH;;AAAA;AAAA;AAAA,wBAY2B;AACvB,aAAO,KAAKnB,KAAL,CAAWE,OAAX,CAAmBuB,SAAnB,CAA6B,KAAKhC,UAAlC,CAAP;AACD;AAdH;AAAA;AAAA,wBAgB+B;AAC3B,aAAO,KAAKO,KAAL,CAAWE,OAAX,CAAmBuB,SAA1B;AACD;AAlBH;AAAA;AAAA,wBAoBkC;AAC9B,aAAO,KAAKzB,KAAL,CAAWE,OAAX,CAAmBwB,YAAnB,CAAgC,KAAKjC,UAArC,CAAP;AACD;AAtBH;AAAA;AAAA,wBAwBsC;AAClC,aAAO,KAAKO,KAAL,CAAWE,OAAX,CAAmBwB,YAA1B;AACD;AA1BH;;AAAA;AAAA,mEAqCG3C,OArCH,wIA0CGA,OA1CH,2IA+CGA,OA/CH;AA0EA,OAAO,SAAS4C,eAAT,CAAyBC,MAAzB,EAAsF;AAC3F,SAAO,OAAOA,MAAM,CAAC,MAAD,CAAb,KAA0B,UAAjC;AACD;AACD,OAAO,SAASC,aAAT,CAA0BC,UAA1B,EAAgF;AACrF,SAAO,OAAOA,UAAU,CAAC,MAAD,CAAjB,KAA8B,UAArC;AACD;AACD,OAAO,SAASC,SAAT,CAAqCC,SAArC,EAA8F;AACnG,MAAMC,MAAM,GAAGD,SAAS,EAAxB;;AACA,MAAIL,eAAe,CAACM,MAAD,CAAnB,EAA6B;AAC3B,WAAOA,MAAM,CAACC,IAAP,CAAY,UAAAN,MAAM;AAAA,aAAIA,MAAM,CAACO,OAAP,CAAepC,KAAnB;AAAA,KAAlB,CAAP;AACD,GAFD,MAEO;AACL,WAAOY,OAAO,CAACC,OAAR,CAAgBqB,MAAM,CAACE,OAAP,CAAepC,KAA/B,CAAP;AACD;AACF;AACD,OAAO,SAASqC,OAAT,CAA2FJ,SAA3F,EAAoHK,QAApH,EAA+L;AACpM,MAAMJ,MAAM,GAAGD,SAAS,EAAxB;;AACA,MAAIL,eAAe,CAACM,MAAD,CAAnB,EAA6B;AAC3B,WAAOA,MAAM,CAACC,IAAP,CAAY,UAAAN,MAAM;AAAA,aAAIA,MAAM,CAACO,OAAP,CAAerC,KAAf,CAAqBuC,QAArB,CAAJ;AAAA,KAAlB,CAAP;AACD,GAFD,MAEO;AACL,WAAOJ,MAAM,CAACE,OAAP,CAAerC,KAAf,CAAqBuC,QAArB,CAAP;AACD;AACF;;AAQD,SAASC,eAAT,CAAyB7C,UAAzB,EAA6C8C,YAA7C,EAAmG;AACjG,MAAMN,MAAM,GAAGM,YAAY,CAAC9C,UAAD,CAAZ,EAAf;;AACA,MAAIkC,eAAe,CAACM,MAAD,CAAnB,EAA6B;AAC3B,WAAOA,MAAM,CAACC,IAAP,CAAY,UAAAN,MAAM,EAAI;AAC3BW,MAAAA,YAAY,CAAC9C,UAAD,CAAZ,GAA2B;AAAA,eAAMmC,MAAN;AAAA,OAA3B;;AACA,aAAOA,MAAP;AACD,KAHM,CAAP;AAID,GALD,MAKO;AACL,WAAOK,MAAP;AACD;AACF;;AACD,SAASO,oBAAT,CAA8BC,WAA9B,EAAqDF,YAArD,EAAoG;AAClG,MAAMG,UAAU,GAAGD,WAAW,CAACE,GAAZ,CAAgB,UAAAlD,UAAU,EAAI;AAC/C,QAAMmC,MAAM,GAAGU,eAAe,CAAC7C,UAAD,EAAa8C,YAAb,CAA9B;;AACA,QAAIZ,eAAe,CAACC,MAAD,CAAnB,EAA6B;AAC3B,aAAOA,MAAP;AACD,KAFD,MAEO;AACL,aAAOjB,OAAO,CAACC,OAAR,CAAgBgB,MAAhB,CAAP;AACD;AACF,GAPkB,CAAnB;AAQA,SAAOjB,OAAO,CAACiC,GAAR,CAAYF,UAAZ,CAAP;AACD;;AAQD,OAAO,SAASG,SAAT,CACLC,MADK,EAELP,YAFK,EAGLQ,aAHK,EAILC,YAJK,EAKU;AAAA,MADfA,YACe;AADfA,IAAAA,YACe,GADc,EACd;AAAA;;AACf7D,EAAAA,QAAQ,CAAC4D,aAAT,GAAyBA,aAAzB;AACA,MAAME,eAAe,GAAGD,YAAY,CAACC,eAAb,IAAgC,gBAAxD;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAIF,YAAY,CAACE,QAAb,IAAyBC,MAAM,CAACF,eAAD,CAAnC,EAAsD;AACpDC,IAAAA,QAAQ,qBAAOC,MAAM,CAACF,eAAD,CAAb,EAAmCD,YAAY,CAACE,QAAhD,CAAR;AACD;;AACD,MAAMlD,KAAK,GAAGZ,UAAU,CAAC8D,QAAD,EAAWF,YAAY,CAACI,QAAxB,EAAkCJ,YAAY,CAACK,WAA/C,EAA4DL,YAAY,CAACM,SAAzE,CAAxB;AACA,MAAMC,cAAwB,GAAG,CAACR,aAAD,CAAjC;;AACA,MAAIG,QAAJ,EAAc;AACZK,IAAAA,cAAc,CAACC,IAAf,OAAAD,cAAc,EAASE,MAAM,CAACC,IAAP,CAAYR,QAAZ,EAAsBS,MAAtB,CAA6B,UAAAC,GAAG;AAAA,aAAIA,GAAG,KAAKb,aAAR,IAAyBG,QAAQ,CAACU,GAAD,CAAR,CAAc7C,QAA3C;AAAA,KAAhC,CAAT,CAAd;AACD;;AACD,SAAOyB,oBAAoB,CAACe,cAAD,EAAiBhB,YAAjB,CAApB,CAAmDL,IAAnD,CAAwD,gBAAiB;AAAA,QAAf2B,SAAe;AAC9E,QAAMC,SAAS,GAAGD,SAAS,CAAC1B,OAAV,CAAkBpC,KAAlB,CAAwBC,KAAxB,CAAlB;AACA8C,IAAAA,MAAM,CAAC9C,KAAD,EAAe6D,SAAS,CAAC1B,OAAV,CAAkBpC,KAAjC,EAAwC8D,SAAS,CAAC1B,OAAV,CAAkBrC,KAA1D,EAAiEmD,eAAjE,CAAN;AACA,WAAOa,SAAP;AACD,GAJM,CAAP;AAKD;AACD,OAAO,SAASC,SAAT,CACLjB,MADK,EAELP,YAFK,EAGLQ,aAHK,EAILC,YAJK,EAKL;AAAA,MADAA,YACA;AADAA,IAAAA,YACA,GAD6B,EAC7B;AAAA;;AACA7D,EAAAA,QAAQ,CAAC4D,aAAT,GAAyBA,aAAzB;AACA,MAAME,eAAe,GAAGD,YAAY,CAACC,eAAb,IAAgC,gBAAxD;AACA,MAAMjD,KAAK,GAAGZ,UAAU,CAAC4D,YAAY,CAACE,QAAd,EAAwBF,YAAY,CAACI,QAArC,EAA+CJ,YAAY,CAACK,WAA5D,EAAyEL,YAAY,CAACM,SAAtF,CAAxB;AACA,MAAMO,SAAS,GAAGtB,YAAY,CAACQ,aAAD,CAAZ,EAAlB;AAEA,SAAOc,SAAS,CAAC1B,OAAV,CACJpC,KADI,CACEC,KADF,EAEJgE,KAFI,CAEE,UAAAC,GAAG,EAAI;AACZ,WAAOjE,KAAK,CAACU,QAAN,CAAerB,WAAW,CAAC4E,GAAD,CAA1B,CAAP;AACD,GAJI,EAKJ/B,IALI,CAKC,YAAM;AACV,WAAOY,MAAM,CAAC9C,KAAD,EAAe6D,SAAS,CAAC1B,OAAV,CAAkBpC,KAAjC,EAAwC8D,SAAS,CAAC1B,OAAV,CAAkBrC,KAA1D,EAAiEmD,eAAjE,CAAb;AACD,GAPI,CAAP;AAQD","sourcesContent":["import {Middleware, ReducersMapObject, StoreEnhancer, Store} from 'redux';\nimport {Action, ActionHandler, ActionCreatorList, reducer, getModuleActionCreatorList, ModelStore, BaseModelState, isPromise, injectActions, MetaData} from './basic';\nimport {buildStore} from './store';\nimport {errorAction} from './actions';\n\nexport interface Model<ModelState extends BaseModelState = BaseModelState> {\n  moduleName: string;\n  initState: ModelState;\n  (store: ModelStore): Promise<void>;\n}\n\nexport interface Module<M extends Model = Model, VS extends {[key: string]: any} = {[key: string]: any}> {\n  default: {\n    moduleName: string;\n    model: M;\n    views: VS;\n  };\n}\nexport type GetModule<M extends Module = Module> = () => M | Promise<M>;\n\nexport interface ModuleGetter {\n  [moduleName: string]: GetModule;\n}\nexport function defineModuleGetter<E extends string, T extends {[K in E]: () => any}>(getter: T) {\n  return getter as {[key in E]: T[key]};\n}\nexport type ReturnModule<T extends () => any> = T extends () => Promise<infer R> ? R : T extends () => infer R ? R : never;\nexport type ReturnViews<T extends () => any> = T extends () => Promise<Module<Model, infer R>> ? R : T extends () => Module<Model, infer R> ? R : never;\ntype ModuleStates<M extends any> = M['default']['model']['initState'];\ntype ModuleViews<M extends any> = {[key in keyof M['views']]?: number};\n\nexport type RootState<G extends ModuleGetter = {}> = {\n  views: {[key in keyof G]?: ModuleViews<ReturnModule<G[key]>>};\n} & {[key in keyof G]?: ModuleStates<ReturnModule<G[key]>>};\n\nexport function exportFacade<T extends ActionCreatorList>(moduleName: string) {\n  const actions: T = getModuleActionCreatorList(moduleName) as T;\n  return {\n    moduleName,\n    actions,\n  };\n}\nexport type ExportModule<Component> = <N extends string, S extends BaseModelState, V extends {[key: string]: Component}>(\n  moduleName: N,\n  initState: S,\n  ActionHandles: {new (initState: S, presetData?: any): BaseModelHandlers<S, any>},\n  views: V\n) => Module<Model<S>, V>['default'];\n\nexport const exportModule: ExportModule<any> = (moduleName, initState, ActionHandles, views) => {\n  const model = (store: ModelStore) => {\n    const hasInjected = store._medux_.injectedModules[moduleName];\n    if (!hasInjected) {\n      store._medux_.injectedModules[moduleName] = true;\n      const moduleState: BaseModelState = store.getState()[moduleName];\n      const handlers = new ActionHandles(initState, moduleState);\n      (handlers as any).moduleName = moduleName;\n      (handlers as any).store = store;\n      const actions = injectActions(store, moduleName, handlers as any);\n      (handlers as any).actions = actions;\n      if (!moduleState) {\n        const initAction = actions.INIT((handlers as any).initState);\n        const action = store.dispatch(initAction);\n        if (isPromise(action)) {\n          return action;\n        } else {\n          return Promise.resolve(void 0);\n        }\n      } else {\n        return Promise.resolve(void 0);\n      }\n    } else {\n      return Promise.resolve(void 0);\n    }\n  };\n  model.moduleName = moduleName;\n  model.initState = initState;\n  return {\n    moduleName,\n    model,\n    views,\n  };\n};\n\nexport class BaseModelHandlers<S extends BaseModelState, R extends RootState> {\n  protected readonly initState: S;\n  protected readonly moduleName: string = '';\n  protected readonly store: ModelStore = null as any;\n  protected readonly actions: Actions<this> = null as any;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public constructor(initState: S, presetData?: any) {\n    initState.isModule = true;\n    this.initState = initState;\n  }\n\n  protected get state(): S {\n    return this.store._medux_.prevState[this.moduleName];\n  }\n\n  protected get rootState(): R {\n    return this.store._medux_.prevState as R;\n  }\n\n  protected get currentState(): S {\n    return this.store._medux_.currentState[this.moduleName];\n  }\n\n  protected get currentRootState(): R {\n    return this.store._medux_.currentState as R;\n  }\n\n  protected dispatch(action: Action): Action | Promise<void> {\n    return this.store.dispatch(action) as any;\n  }\n\n  protected callThisAction<T extends any[]>(handler: (...args: T) => any, ...rest: T): {type: string; playload?: any} {\n    const actions = getModuleActionCreatorList(this.moduleName);\n    return actions[(handler as ActionHandler).__actionName__](rest[0]);\n  }\n\n  @reducer\n  protected INIT(payload: S): S {\n    return payload;\n  }\n\n  @reducer\n  protected UPDATE(payload: S): S {\n    return payload;\n  }\n\n  @reducer\n  protected LOADING(payload: {[group: string]: string}): S {\n    const state = this.state;\n    if (!state) {\n      return state;\n    }\n    return {\n      ...state,\n      loading: {...state.loading, ...payload},\n    };\n  }\n\n  protected updateState(payload: Partial<S>) {\n    this.dispatch(this.callThisAction(this.UPDATE, {...this.state, ...payload}));\n  }\n}\n\ntype Handler<F> = F extends (...args: infer P) => any\n  ? (\n      ...args: P\n    ) => {\n      type: string;\n    }\n  : never;\n\nexport type Actions<Ins> = {[K in keyof Ins]: Ins[K] extends (...args: any[]) => any ? Handler<Ins[K]> : never};\n\nexport function isPromiseModule(module: Module | Promise<Module>): module is Promise<Module> {\n  return typeof module['then'] === 'function';\n}\nexport function isPromiseView<T>(moduleView: T | Promise<T>): moduleView is Promise<T> {\n  return typeof moduleView['then'] === 'function';\n}\nexport function loadModel<M extends Module>(getModule: GetModule<M>): Promise<M['default']['model']> {\n  const result = getModule();\n  if (isPromiseModule(result)) {\n    return result.then(module => module.default.model);\n  } else {\n    return Promise.resolve(result.default.model);\n  }\n}\nexport function getView<M extends Module, N extends Extract<keyof M['default']['views'], string>>(getModule: GetModule<M>, viewName: N): M['default']['views'][N] | Promise<M['default']['views'][N]> {\n  const result = getModule();\n  if (isPromiseModule(result)) {\n    return result.then(module => module.default.views[viewName]);\n  } else {\n    return result.default.views[viewName];\n  }\n}\n\nexport type LoadView = <MG extends ModuleGetter, M extends Extract<keyof MG, string>, V extends ReturnViews<MG[M]>, N extends Extract<keyof V, string>>(\n  moduleGetter: MG,\n  moduleName: M,\n  viewName: N\n) => V[N];\n\nfunction getModuleByName(moduleName: string, moduleGetter: ModuleGetter): Promise<Module> | Module {\n  const result = moduleGetter[moduleName]();\n  if (isPromiseModule(result)) {\n    return result.then(module => {\n      moduleGetter[moduleName] = () => module;\n      return module;\n    });\n  } else {\n    return result;\n  }\n}\nfunction getModuleListByNames(moduleNames: string[], moduleGetter: ModuleGetter): Promise<Module[]> {\n  const preModules = moduleNames.map(moduleName => {\n    const module = getModuleByName(moduleName, moduleGetter);\n    if (isPromiseModule(module)) {\n      return module;\n    } else {\n      return Promise.resolve(module);\n    }\n  });\n  return Promise.all(preModules);\n}\nexport interface StoreOptions {\n  ssrInitStoreKey?: string;\n  reducers?: ReducersMapObject;\n  middlewares?: Middleware[];\n  enhancers?: StoreEnhancer[];\n  initData?: {[key: string]: any};\n}\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (store: Store, appModel: Model, appViews: {[key: string]: any}, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions = {}\n): Promise<void> {\n  MetaData.appModuleName = appModuleName;\n  const ssrInitStoreKey = storeOptions.ssrInitStoreKey || 'meduxInitStore';\n  let initData = {};\n  if (storeOptions.initData || window[ssrInitStoreKey]) {\n    initData = {...window[ssrInitStoreKey], ...storeOptions.initData};\n  }\n  const store = buildStore(initData, storeOptions.reducers, storeOptions.middlewares, storeOptions.enhancers);\n  const preModuleNames: string[] = [appModuleName];\n  if (initData) {\n    preModuleNames.push(...Object.keys(initData).filter(key => key !== appModuleName && initData[key].isModule));\n  }\n  return getModuleListByNames(preModuleNames, moduleGetter).then(([appModule]) => {\n    const initModel = appModule.default.model(store);\n    render(store as any, appModule.default.model, appModule.default.views, ssrInitStoreKey);\n    return initModel;\n  });\n}\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (store: Store, appModel: Model, appViews: {[key: string]: any}, ssrInitStoreKey: string) => {html: any; data: any; ssrInitStoreKey: string},\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions = {}\n) {\n  MetaData.appModuleName = appModuleName;\n  const ssrInitStoreKey = storeOptions.ssrInitStoreKey || 'meduxInitStore';\n  const store = buildStore(storeOptions.initData, storeOptions.reducers, storeOptions.middlewares, storeOptions.enhancers);\n  const appModule = moduleGetter[appModuleName]() as Module;\n\n  return appModule.default\n    .model(store)\n    .catch(err => {\n      return store.dispatch(errorAction(err)) as any;\n    })\n    .then(() => {\n      return render(store as any, appModule.default.model, appModule.default.views, ssrInitStoreKey);\n    });\n}\n"],"file":"module.js"}