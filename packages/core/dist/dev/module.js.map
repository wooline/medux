{"version":3,"sources":["../../src/module.ts"],"names":["reducer","getModuleActionCreatorList","isPromise","injectActions","MetaData","buildStore","errorAction","exportFacade","moduleName","actions","exportModule","model","views","BaseModuleHandlers","initState","presetData","store","isModule","dispatch","action","callThisAction","handler","__actionName__","INIT","payload","UPDATE","LOADING","state","loading","updateState","_medux_","prevState","currentState","exportModel","HandlersClass","fun","hasInjected","injectedModules","moduleState","getState","handlers","initAction","Promise","resolve","isPromiseModule","module","isPromiseView","moduleView","loadModel","getModule","result","then","getView","viewName","getModuleByName","moduleGetter","getModuleListByNames","moduleNames","preModules","map","all","renderApp","render","appModuleName","storeOptions","ssrInitStoreKey","initData","window","reducers","middlewares","enhancers","preModuleNames","push","Object","keys","filter","key","appModule","initModel","renderSSR","catch","err"],"mappings":"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","sourcesContent":["import {Middleware, ReducersMapObject, StoreEnhancer, Store} from 'redux';\nimport {Action, ActionHandler, ActionCreatorList, reducer, getModuleActionCreatorList, ModelStore, BaseModuleState, isPromise, injectActions, MetaData} from './basic';\nimport {buildStore} from './store';\nimport {errorAction} from './actions';\n\nexport interface Model<ModuleState extends BaseModuleState = BaseModuleState> {\n  moduleName: string;\n  initState: ModuleState;\n  (store: ModelStore): Promise<void>;\n}\n\nexport interface Module<M extends Model = Model, VS extends {[key: string]: any} = {[key: string]: any}> {\n  moduleName: string;\n  model: M;\n  views: VS;\n}\nexport type GetModule<M extends Module = Module> = () => M | Promise<M>;\n\nexport interface ModuleGetter {\n  [moduleName: string]: GetModule;\n}\nexport type ReturnModule<T extends () => any> = T extends () => Promise<infer R> ? R : T extends () => infer R ? R : never;\nexport type ReturnViews<T extends () => any> = T extends () => Promise<Module<Model, infer R>> ? R : never;\ntype ModuleStates<M extends any> = M['model']['initState'];\ntype ModuleViews<M extends any> = {[key in keyof M['views']]?: number};\n\nexport type RootState<G extends ModuleGetter = {}> = {\n  views: {[key in keyof G]?: ModuleViews<ReturnModule<G[key]>>};\n} & {[key in keyof G]?: ModuleStates<ReturnModule<G[key]>>};\n\nexport function exportFacade<T extends ActionCreatorList, N extends string>(moduleName: N) {\n  const actions: T = getModuleActionCreatorList(moduleName) as T;\n  return {\n    moduleName,\n    actions,\n  };\n}\nexport function exportModule<M extends Model, V, N extends string>(moduleName: N, model: M, views: V): Module<M, V> {\n  return {\n    moduleName,\n    model,\n    views,\n  };\n}\nexport class BaseModuleHandlers<S extends BaseModuleState, R extends RootState> {\n  protected readonly initState: S;\n  protected readonly moduleName: string = '';\n  protected readonly store: ModelStore = null as any;\n  protected readonly actions: Actions<this> = null as any;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public constructor(initState: S, presetData?: any) {\n    initState.isModule = true;\n    this.initState = initState;\n  }\n\n  protected get state(): S {\n    return this.store._medux_.prevState[this.moduleName];\n  }\n\n  protected get rootState(): R {\n    return this.store._medux_.prevState as R;\n  }\n\n  protected get currentState(): S {\n    return this.store._medux_.currentState[this.moduleName];\n  }\n\n  protected get currentRootState(): R {\n    return this.store._medux_.currentState as R;\n  }\n\n  protected dispatch(action: Action): Action | Promise<void> {\n    return this.store.dispatch(action) as any;\n  }\n\n  protected callThisAction<T extends any[]>(handler: (...args: T) => any, ...rest: T): {type: string; playload?: any} {\n    const actions = getModuleActionCreatorList(this.moduleName);\n    return actions[(handler as ActionHandler).__actionName__](rest[0]);\n  }\n\n  @reducer\n  protected INIT(payload: S): S {\n    return payload;\n  }\n\n  @reducer\n  protected UPDATE(payload: S): S {\n    return payload;\n  }\n\n  @reducer\n  protected LOADING(payload: {[group: string]: string}): S {\n    const state = this.state;\n    if (!state) {\n      return state;\n    }\n    return {\n      ...state,\n      loading: {...state.loading, ...payload},\n    };\n  }\n\n  protected updateState(payload: Partial<S>) {\n    this.dispatch(this.callThisAction(this.UPDATE, {...this.state, ...payload}));\n  }\n}\n\ntype Handler<F> = F extends (...args: infer P) => any\n  ? (\n      ...args: P\n    ) => {\n      type: string;\n    }\n  : never;\n\nexport type Actions<Ins> = {[K in keyof Ins]: Ins[K] extends (...args: any[]) => any ? Handler<Ins[K]> : never};\nexport function exportModel<S extends BaseModuleState>(\n  HandlersClass: {new (initState: S, presetData?: any): BaseModuleHandlers<BaseModuleState, RootState>},\n  initState: S\n): (moduleName: string) => Model<S> {\n  return (moduleName: string) => {\n    const fun = (store: ModelStore) => {\n      const hasInjected = store._medux_.injectedModules[moduleName];\n      if (!hasInjected) {\n        store._medux_.injectedModules[moduleName] = true;\n        const moduleState: BaseModuleState = store.getState()[moduleName];\n        const handlers = new HandlersClass(initState, moduleState);\n        (handlers as any).moduleName = moduleName;\n        (handlers as any).store = store;\n        const actions = injectActions(store, moduleName, handlers as any);\n        (handlers as any).actions = actions;\n        if (!moduleState) {\n          const initAction = actions.INIT((handlers as any).initState);\n          const action = store.dispatch(initAction);\n          if (isPromise(action)) {\n            return action;\n          } else {\n            return Promise.resolve(void 0);\n          }\n        } else {\n          return Promise.resolve(void 0);\n        }\n      } else {\n        return Promise.resolve(void 0);\n      }\n    };\n    fun.moduleName = moduleName;\n    fun.initState = initState;\n    return fun;\n  };\n}\nexport function isPromiseModule(module: Module | Promise<Module>): module is Promise<Module> {\n  return typeof module['then'] === 'function';\n}\nexport function isPromiseView<T>(moduleView: T | Promise<T>): moduleView is Promise<T> {\n  return typeof moduleView['then'] === 'function';\n}\nexport function loadModel<M extends Module>(getModule: GetModule<M>): Promise<M['model']> {\n  const result = getModule();\n  if (isPromiseModule(result)) {\n    return result.then(module => module.model);\n  } else {\n    return Promise.resolve(result.model);\n  }\n}\nexport function getView<M extends Module, N extends Extract<keyof M['views'], string>>(getModule: GetModule<M>, viewName: N): M['views'][N] | Promise<M['views'][N]> {\n  const result = getModule();\n  if (isPromiseModule(result)) {\n    return result.then(module => module.views[viewName]);\n  } else {\n    return result.views[viewName];\n  }\n}\nexport type ExportView<C> = (ComponentView: C, model: Model, viewName: string) => C;\n\nexport type LoadView = <MG extends ModuleGetter, M extends Extract<keyof MG, string>, V extends ReturnViews<MG[M]>, N extends Extract<keyof V, string>>(\n  moduleGetter: MG,\n  moduleName: M,\n  viewName: N\n) => V[N];\n\nfunction getModuleByName(moduleName: string, moduleGetter: ModuleGetter): Promise<Module> | Module {\n  const result = moduleGetter[moduleName]();\n  if (isPromiseModule(result)) {\n    return result.then(module => {\n      moduleGetter[moduleName] = () => module;\n      return module;\n    });\n  } else {\n    return result;\n  }\n}\nfunction getModuleListByNames(moduleNames: string[], moduleGetter: ModuleGetter): Promise<Module[]> {\n  const preModules = moduleNames.map(moduleName => {\n    const module = getModuleByName(moduleName, moduleGetter);\n    if (isPromiseModule(module)) {\n      return module;\n    } else {\n      return Promise.resolve(module);\n    }\n  });\n  return Promise.all(preModules);\n}\nexport interface StoreOptions {\n  ssrInitStoreKey?: string;\n  reducers?: ReducersMapObject;\n  middlewares?: Middleware[];\n  enhancers?: StoreEnhancer[];\n  initData?: {[key: string]: any};\n}\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (store: Store, appModel: Model, appViews: {[key: string]: any}, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions = {}\n): Promise<void> {\n  MetaData.appModuleName = appModuleName;\n  const ssrInitStoreKey = storeOptions.ssrInitStoreKey || 'meduxInitStore';\n  let initData = {};\n  if (storeOptions.initData || window[ssrInitStoreKey]) {\n    initData = {...window[ssrInitStoreKey], ...storeOptions.initData};\n  }\n  const store = buildStore(initData, storeOptions.reducers, storeOptions.middlewares, storeOptions.enhancers);\n  const preModuleNames: string[] = [appModuleName];\n  if (initData) {\n    preModuleNames.push(...Object.keys(initData).filter(key => key !== appModuleName && initData[key].isModule));\n  }\n  return getModuleListByNames(preModuleNames, moduleGetter).then(([appModule]) => {\n    const initModel = appModule.model(store);\n    render(store as any, appModule.model, appModule.views, ssrInitStoreKey);\n    return initModel;\n  });\n}\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (store: Store, appModel: Model, appViews: {[key: string]: any}, ssrInitStoreKey: string) => {html: any; data: any; ssrInitStoreKey: string},\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions = {}\n) {\n  MetaData.appModuleName = appModuleName;\n  const ssrInitStoreKey = storeOptions.ssrInitStoreKey || 'meduxInitStore';\n  const store = buildStore(storeOptions.initData, storeOptions.reducers, storeOptions.middlewares, storeOptions.enhancers);\n  const appModule = moduleGetter[appModuleName]() as Module;\n\n  return appModule\n    .model(store)\n    .catch(err => {\n      return store.dispatch(errorAction(err));\n    })\n    .then(() => {\n      return render(store as any, appModule.model, appModule.views, ssrInitStoreKey);\n    });\n}\n"],"file":"module.js"}