{"version":3,"sources":["../../src/module.ts"],"names":["MetaData","defaultRouteParams","injectActions","isPromise","reducer","ActionTypes","errorAction","buildStore","exportModule","moduleName","initState","ActionHandles","views","routeParams","model","store","hasInjected","_medux_","injectedModules","moduleState","getState","handlers","actions","params","rootState","route","data","initAction","INIT","result","dispatch","catch","err","then","simpleEqual","obj1","obj2","keys1","Object","keys","keys2","length","key","BaseModelHandlers","presetData","isModule","prevState","currentState","action","handler","actionCreatorMap","__actionName__","state","routeData","payload","mergeRouteState","loading","callThisAction","UPDATE","F_ROUTE_CHANGE","isPromiseModule","module","isPromiseView","moduleView","exportActions","moduleGetter","reduce","maps","Proxy","get","target","type","set","injectModel","default","getView","viewName","view","isServer","initModel","clientStore","getModuleByName","getModuleListByNames","moduleNames","preModules","map","Promise","resolve","all","renderApp","render","appModuleName","history","storeOptions","ssrInitStoreKey","initData","window","reducers","middlewares","enhancers","preModuleNames","push","filter","appModule","renderSSR","initAppModel"],"mappings":"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","sourcesContent":["import {Action, ActionCreatorList, ActionHandler, BaseModelState, MetaData, ModelStore, RouteState, defaultRouteParams, injectActions, isPromise, reducer} from './basic';\nimport {ActionTypes, errorAction} from './actions';\nimport {HistoryProxy, buildStore} from './store';\nimport {Middleware, ReducersMapObject, Store, StoreEnhancer} from 'redux';\n\nexport interface Model<ModelState extends BaseModelState = BaseModelState> {\n  moduleName: string;\n  initState: ModelState;\n  (store: ModelStore): void | Promise<void>;\n}\n\nexport interface Module<M extends Model = Model, VS extends {[key: string]: any} = {[key: string]: any}, AS extends ActionCreatorList = {}, N extends string = string> {\n  default: {\n    moduleName: N;\n    model: M;\n    views: VS;\n    actions: AS;\n  };\n}\n\nexport interface ModuleGetter {\n  [moduleName: string]: () => Module | Promise<Module>;\n}\n\ntype ReturnModule<T> = T extends () => Promise<infer R> ? R : T extends () => infer R ? R : never;\n// export type ReturnViews<T extends () => any> = T extends () => Promise<Module<Model, infer R>> ? R : T extends () => Module<Model, infer R> ? R : never;\ntype ModuleName<M extends any> = M['default']['moduleName'];\ntype ModuleStates<M extends any> = M['default']['model']['initState'];\ntype ModuleParams<M extends any> = M['default']['model']['initState']['routeParams'];\ntype ModuleViews<M extends any> = M['default']['views'];\ntype ModuleActions<M extends any> = M['default']['actions'];\ntype MountViews<M extends any> = {[key in keyof M['default']['views']]?: boolean};\nexport type RootState<G extends ModuleGetter, L> = {\n  route: {\n    location: L;\n    data: {\n      views: {[key in keyof G]?: MountViews<ReturnModule<G[key]>>};\n      params: {[key in keyof G]?: ModuleParams<ReturnModule<G[key]>>};\n      paths: any;\n    };\n  };\n} & {[key in keyof G]?: ModuleStates<ReturnModule<G[key]>>};\n\nexport type ExportModule<Component> = <S extends BaseModelState, V extends {[key: string]: Component}, T extends BaseModelHandlers<S, any>, N extends string>(\n  moduleName: N,\n  initState: S,\n  ActionHandles: {new (moduleName: string, store: any, initState: any, presetData?: any): T},\n  views: V\n) => Module<Model<S>, V, Actions<T>, N>['default'];\n\nexport const exportModule: ExportModule<any> = (moduleName, initState, ActionHandles, views) => {\n  defaultRouteParams[moduleName] = initState.routeParams;\n  const model = (store: ModelStore) => {\n    const hasInjected = store._medux_.injectedModules[moduleName];\n    if (!hasInjected) {\n      store._medux_.injectedModules[moduleName] = true;\n      const moduleState: BaseModelState = store.getState()[moduleName];\n      const handlers = new ActionHandles(moduleName, store, initState, moduleState);\n      const actions = injectActions(store, moduleName, handlers as any);\n      (handlers as any).actions = actions;\n      if (!moduleState) {\n        const params = (handlers.rootState.route as RouteState).data.params || {};\n        const initAction = actions.INIT({...initState, routeParams: params[moduleName]});\n        const result = store.dispatch(initAction);\n        if (isPromise(result)) {\n          return result\n            .catch(err => {\n              return store.dispatch(errorAction(err)) as any;\n            })\n            .then(() => void 0);\n        }\n      }\n    }\n    return void 0;\n  };\n  model.moduleName = moduleName;\n  model.initState = initState;\n  const actions = {} as any;\n  return {\n    moduleName,\n    model,\n    views,\n    actions,\n  };\n};\n\nfunction simpleEqual(obj1: any, obj2: any): boolean {\n  if (obj1 === obj2) {\n    return true;\n  } else if (typeof obj1 !== typeof obj2 || typeof obj1 !== 'object') {\n    return false;\n  } else {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n      return false;\n    } else {\n      for (const key of keys1) {\n        if (!simpleEqual(obj1[key], obj2[key])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n}\nexport abstract class BaseModelHandlers<S extends BaseModelState, R> {\n  protected readonly actions: Actions<this> = null as any;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public constructor(protected readonly moduleName: string, protected readonly store: ModelStore, protected readonly initState: S, presetData?: any) {\n    initState.isModule = true;\n  }\n\n  public get state(): S {\n    return this.store._medux_.prevState[this.moduleName];\n  }\n\n  public get rootState(): R {\n    return this.store._medux_.prevState as R;\n  }\n\n  public get currentState(): S {\n    return this.store._medux_.currentState[this.moduleName];\n  }\n\n  public get currentRootState(): R {\n    return this.store._medux_.currentState as R;\n  }\n\n  protected dispatch(action: Action): Action | Promise<void> {\n    return this.store.dispatch(action) as any;\n  }\n\n  protected callThisAction<T extends any[]>(handler: (...args: T) => any, ...rest: T): {type: string; playload?: any} {\n    const actions = MetaData.actionCreatorMap[this.moduleName];\n    return actions[(handler as ActionHandler).__actionName__](rest[0]);\n  }\n\n  protected mergeRouteState(state: S, routeData: RouteState): S {\n    if (routeData.data.views[this.moduleName]) {\n      const routeParams = routeData.data.params[this.moduleName];\n      if (!simpleEqual(routeParams, state.routeParams)) {\n        return {...state, routeParams: routeParams};\n      }\n    }\n    return state;\n  }\n  @reducer\n  protected INIT(payload: S): S {\n    return this.mergeRouteState(payload, this.rootState['route']);\n  }\n\n  @reducer\n  protected UPDATE(payload: S): S {\n    return payload;\n  }\n\n  @reducer\n  protected LOADING(payload: {[group: string]: string}): S {\n    const state = this.state;\n    if (!state) {\n      return state;\n    }\n    return {\n      ...state,\n      loading: {...state.loading, ...payload},\n    };\n  }\n\n  protected updateState(payload: Partial<S>) {\n    this.dispatch(this.callThisAction(this.UPDATE, {...this.state, ...payload}));\n  }\n\n  @reducer\n  protected [ActionTypes.F_ROUTE_CHANGE](routeData: RouteState): S {\n    return this.mergeRouteState(this.state, routeData);\n  }\n}\n\ntype Handler<F> = F extends (...args: infer P) => any\n  ? (\n      ...args: P\n    ) => {\n      type: string;\n    }\n  : never;\n\nexport type Actions<Ins> = {[K in keyof Ins]: Ins[K] extends (...args: any[]) => any ? Handler<Ins[K]> : never};\n\nexport function isPromiseModule(module: Module | Promise<Module>): module is Promise<Module> {\n  return typeof module['then'] === 'function';\n}\nexport function isPromiseView<T>(moduleView: T | Promise<T>): moduleView is Promise<T> {\n  return typeof moduleView['then'] === 'function';\n}\n\nexport function exportActions<G extends {[N in keyof G]: N extends ModuleName<ReturnModule<G[N]>> ? G[N] : never}>(moduleGetter: G): {[key in keyof G]: ModuleActions<ReturnModule<G[key]>>} {\n  MetaData.moduleGetter = moduleGetter as any;\n  MetaData.actionCreatorMap = Object.keys(moduleGetter).reduce((maps, moduleName) => {\n    maps[moduleName] =\n      typeof Proxy === 'undefined'\n        ? {}\n        : new Proxy(\n            {},\n            {\n              get: (target: {}, key: string) => {\n                return (payload: any) => ({type: moduleName + '/' + key, payload});\n              },\n              set: () => {\n                return true;\n              },\n            }\n          );\n    return maps;\n  }, {});\n  return MetaData.actionCreatorMap as any;\n}\n\nexport function injectModel<MG extends ModuleGetter, N extends Extract<keyof MG, string>>(moduleGetter: MG, moduleName: N, store: ModelStore): void | Promise<void> {\n  const hasInjected = store._medux_.injectedModules[moduleName];\n  if (!hasInjected) {\n    moduleGetter = MetaData.moduleGetter as any;\n    const result = moduleGetter[moduleName]();\n    if (isPromiseModule(result)) {\n      return result.then(module => {\n        moduleGetter[moduleName] = (() => module) as any;\n        return module.default.model(store);\n      });\n    } else {\n      return result.default.model(store);\n    }\n  }\n}\n\nexport function getView<T>(moduleGetter: ModuleGetter, moduleName: string, viewName: string): T | Promise<T> {\n  moduleGetter = MetaData.moduleGetter;\n  const result = moduleGetter[moduleName]();\n  if (isPromiseModule(result)) {\n    return result.then(module => {\n      moduleGetter[moduleName] = () => module;\n      const view: T = module.default.views[viewName];\n      if (MetaData.isServer) {\n        return view;\n      }\n      const initModel = module.default.model(MetaData.clientStore);\n      if (isPromise(initModel)) {\n        return initModel.then(() => view);\n      } else {\n        return view;\n      }\n    });\n  } else {\n    const view: T = result.default.views[viewName];\n    if (MetaData.isServer) {\n      return view;\n    }\n    const initModel = result.default.model(MetaData.clientStore);\n    if (isPromise(initModel)) {\n      return initModel.then(() => view);\n    } else {\n      return view;\n    }\n  }\n}\n\nexport type LoadView = <MG extends ModuleGetter, M extends Extract<keyof MG, string>, V extends ModuleViews<ReturnModule<MG[M]>>, N extends Extract<keyof V, string>>(\n  moduleGetter: MG,\n  moduleName: M,\n  viewName: N\n) => V[N];\n\nfunction getModuleByName(moduleName: string, moduleGetter: ModuleGetter): Promise<Module> | Module {\n  const result = moduleGetter[moduleName]();\n  if (isPromiseModule(result)) {\n    return result.then(module => {\n      //在SSR时loadView不能出现异步，否则浏览器初轮渲染不会包括异步组件，从而导致和服务器返回不一致\n      moduleGetter[moduleName] = () => module;\n      return module;\n    });\n  } else {\n    return result;\n  }\n}\nfunction getModuleListByNames(moduleNames: string[], moduleGetter: ModuleGetter): Promise<Module[]> {\n  const preModules = moduleNames.map(moduleName => {\n    const module = getModuleByName(moduleName, moduleGetter);\n    if (isPromiseModule(module)) {\n      return module;\n    } else {\n      return Promise.resolve(module);\n    }\n  });\n  return Promise.all(preModules);\n}\nexport interface StoreOptions {\n  ssrInitStoreKey?: string;\n  reducers?: ReducersMapObject;\n  middlewares?: Middleware[];\n  enhancers?: StoreEnhancer[];\n  initData?: {[key: string]: any};\n}\n\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (store: Store, appModel: Model, appViews: {[key: string]: any}, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  history: HistoryProxy,\n  storeOptions: StoreOptions = {}\n): Promise<void> {\n  MetaData.appModuleName = appModuleName;\n  const ssrInitStoreKey = storeOptions.ssrInitStoreKey || 'meduxInitStore';\n  let initData = {};\n  if (storeOptions.initData || window[ssrInitStoreKey]) {\n    initData = {...window[ssrInitStoreKey], ...storeOptions.initData};\n  }\n  const store = buildStore(history, initData, storeOptions.reducers, storeOptions.middlewares, storeOptions.enhancers);\n  const preModuleNames: string[] = [appModuleName];\n  if (initData) {\n    preModuleNames.push(...Object.keys(initData).filter(key => key !== appModuleName && initData[key].isModule));\n  }\n  return getModuleListByNames(preModuleNames, moduleGetter).then(([appModule]) => {\n    const initModel = appModule.default.model(store);\n    render(store as any, appModule.default.model, appModule.default.views, ssrInitStoreKey);\n    return initModel;\n  });\n}\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (store: Store, appModel: Model, appViews: {[key: string]: any}, ssrInitStoreKey: string) => {html: any; data: any; ssrInitStoreKey: string},\n  moduleGetter: M,\n  appModuleName: A,\n  history: HistoryProxy,\n  storeOptions: StoreOptions = {}\n) {\n  MetaData.appModuleName = appModuleName;\n  const ssrInitStoreKey = storeOptions.ssrInitStoreKey || 'meduxInitStore';\n  const store = buildStore(history, storeOptions.initData, storeOptions.reducers, storeOptions.middlewares, storeOptions.enhancers);\n  const appModule = moduleGetter[appModuleName]() as Module;\n  let initAppModel = appModule.default.model(store);\n  if (!isPromise(initAppModel)) {\n    initAppModel = Promise.resolve();\n  }\n  return initAppModel.then(() => {\n    return render(store as any, appModule.default.model, appModule.default.views, ssrInitStoreKey);\n  });\n}\n"],"file":"module.js"}