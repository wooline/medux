{"version":3,"sources":["../../src/module.ts"],"names":["reducer","getModuleActionCreatorList","isPromise","injectActions","MetaData","buildStore","errorAction","defineModuleGetter","getter","exportFacade","moduleName","actions","exportModule","loadModel","views","model","BaseModuleHandlers","initState","presetData","store","isModule","dispatch","action","callThisAction","handler","__actionName__","INIT","payload","UPDATE","LOADING","state","loading","updateState","_medux_","prevState","currentState","exportModel","HandlersClass","wrap","loadModule","hasInjected","injectedModules","moduleState","getState","handlers","initAction","Promise","resolve","isPromiseModule","module","isPromiseView","moduleView","getModule","result","then","default","getView","viewName","getModuleByName","moduleGetter","getModuleListByNames","moduleNames","preModules","map","all","renderApp","render","appModuleName","storeOptions","ssrInitStoreKey","initData","window","reducers","middlewares","enhancers","preModuleNames","push","Object","keys","filter","key","appModule","initModel","renderSSR","catch","err"],"mappings":"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","sourcesContent":["import {Middleware, ReducersMapObject, StoreEnhancer, Store} from 'redux';\nimport {Action, ActionHandler, ActionCreatorList, reducer, getModuleActionCreatorList, ModelStore, BaseModuleState, isPromise, injectActions, MetaData} from './basic';\nimport {buildStore} from './store';\nimport {errorAction} from './actions';\n\nexport interface Model<ModuleState extends BaseModuleState = BaseModuleState> {\n  moduleName: string;\n  initState: ModuleState;\n  (store: ModelStore): Promise<void>;\n}\n\nexport interface Module<M extends Model = Model, VS extends {[key: string]: any} = {[key: string]: any}> {\n  default: {\n    moduleName: string;\n    model: M;\n    views: VS;\n  };\n}\nexport type GetModule<M extends Module = Module> = () => M | Promise<M>;\n\nexport interface ModuleGetter {\n  [moduleName: string]: GetModule;\n}\nexport function defineModuleGetter<E extends string, T extends {[K in E]: () => any}>(getter: T) {\n  return getter as {[key in E]: T[key]};\n}\nexport type ReturnModule<T extends () => any> = T extends () => Promise<infer R> ? R : T extends () => infer R ? R : never;\nexport type ReturnViews<T extends () => any> = T extends () => Promise<Module<Model, infer R>> ? R : T extends () => Module<Model, infer R> ? R : never;\ntype ModuleStates<M extends any> = M['default']['model']['initState'];\ntype ModuleViews<M extends any> = {[key in keyof M['views']]?: number};\n\nexport type RootState<G extends ModuleGetter = {}> = {\n  views: {[key in keyof G]?: ModuleViews<ReturnModule<G[key]>>};\n} & {[key in keyof G]?: ModuleStates<ReturnModule<G[key]>>};\n\nexport function exportFacade<T extends ActionCreatorList>(moduleName: string) {\n  const actions: T = getModuleActionCreatorList(moduleName) as T;\n  return {\n    moduleName,\n    actions,\n  };\n}\nexport function exportModule<L extends (moduleName?: string) => Model, V>(moduleName: string, loadModel: L, views: V): Module<ReturnType<L>, V>['default'] {\n  return {\n    moduleName,\n    model: loadModel(moduleName) as any,\n    views,\n  };\n}\nexport class BaseModuleHandlers<S extends BaseModuleState, R extends RootState> {\n  protected readonly initState: S;\n  protected readonly moduleName: string = '';\n  protected readonly store: ModelStore = null as any;\n  protected readonly actions: Actions<this> = null as any;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public constructor(initState: S, presetData?: any) {\n    initState.isModule = true;\n    this.initState = initState;\n  }\n\n  protected get state(): S {\n    return this.store._medux_.prevState[this.moduleName];\n  }\n\n  protected get rootState(): R {\n    return this.store._medux_.prevState as R;\n  }\n\n  protected get currentState(): S {\n    return this.store._medux_.currentState[this.moduleName];\n  }\n\n  protected get currentRootState(): R {\n    return this.store._medux_.currentState as R;\n  }\n\n  protected dispatch(action: Action): Action | Promise<void> {\n    return this.store.dispatch(action) as any;\n  }\n\n  protected callThisAction<T extends any[]>(handler: (...args: T) => any, ...rest: T): {type: string; playload?: any} {\n    const actions = getModuleActionCreatorList(this.moduleName);\n    return actions[(handler as ActionHandler).__actionName__](rest[0]);\n  }\n\n  @reducer\n  protected INIT(payload: S): S {\n    return payload;\n  }\n\n  @reducer\n  protected UPDATE(payload: S): S {\n    return payload;\n  }\n\n  @reducer\n  protected LOADING(payload: {[group: string]: string}): S {\n    const state = this.state;\n    if (!state) {\n      return state;\n    }\n    return {\n      ...state,\n      loading: {...state.loading, ...payload},\n    };\n  }\n\n  protected updateState(payload: Partial<S>) {\n    this.dispatch(this.callThisAction(this.UPDATE, {...this.state, ...payload}));\n  }\n}\n\ntype Handler<F> = F extends (...args: infer P) => any\n  ? (\n      ...args: P\n    ) => {\n      type: string;\n    }\n  : never;\n\nexport type Actions<Ins> = {[K in keyof Ins]: Ins[K] extends (...args: any[]) => any ? Handler<Ins[K]> : never};\nexport function exportModel<S extends BaseModuleState>(\n  HandlersClass: {new (initState: S, presetData?: any): BaseModuleHandlers<BaseModuleState, RootState>},\n  initState: S\n): (moduleName?: string) => Model<S> {\n  const wrap: {(moduleName?: string): Model<S>; loadModule?: Model<S>} = (moduleName: string = '') => {\n    if (!wrap.loadModule) {\n      wrap.loadModule = ((store: ModelStore) => {\n        const hasInjected = store._medux_.injectedModules[moduleName];\n        if (!hasInjected) {\n          store._medux_.injectedModules[moduleName] = true;\n          const moduleState: BaseModuleState = store.getState()[moduleName];\n          const handlers = new HandlersClass(initState, moduleState);\n          (handlers as any).moduleName = moduleName;\n          (handlers as any).store = store;\n          const actions = injectActions(store, moduleName, handlers as any);\n          (handlers as any).actions = actions;\n          if (!moduleState) {\n            const initAction = actions.INIT((handlers as any).initState);\n            const action = store.dispatch(initAction);\n            if (isPromise(action)) {\n              return action;\n            } else {\n              return Promise.resolve(void 0);\n            }\n          } else {\n            return Promise.resolve(void 0);\n          }\n        } else {\n          return Promise.resolve(void 0);\n        }\n      }) as any;\n      wrap.loadModule!.moduleName = moduleName;\n      wrap.loadModule!.initState = initState;\n    }\n    return wrap.loadModule!;\n  };\n  return wrap;\n}\nexport function isPromiseModule(module: Module | Promise<Module>): module is Promise<Module> {\n  return typeof module['then'] === 'function';\n}\nexport function isPromiseView<T>(moduleView: T | Promise<T>): moduleView is Promise<T> {\n  return typeof moduleView['then'] === 'function';\n}\nexport function loadModel<M extends Module>(getModule: GetModule<M>): Promise<M['default']['model']> {\n  const result = getModule();\n  if (isPromiseModule(result)) {\n    return result.then(module => module.default.model);\n  } else {\n    return Promise.resolve(result.default.model);\n  }\n}\nexport function getView<M extends Module, N extends Extract<keyof M['default']['views'], string>>(getModule: GetModule<M>, viewName: N): M['default']['views'][N] | Promise<M['default']['views'][N]> {\n  const result = getModule();\n  if (isPromiseModule(result)) {\n    return result.then(module => module.default.views[viewName]);\n  } else {\n    return result.default.views[viewName];\n  }\n}\nexport type ExportView<D> = <C extends D>(ComponentView: C, loadModel: (moduleName?: string) => Model, viewName: string) => C;\n\nexport type LoadView = <MG extends ModuleGetter, M extends Extract<keyof MG, string>, V extends ReturnViews<MG[M]>, N extends Extract<keyof V, string>>(\n  moduleGetter: MG,\n  moduleName: M,\n  viewName: N\n) => V[N];\n\nfunction getModuleByName(moduleName: string, moduleGetter: ModuleGetter): Promise<Module> | Module {\n  const result = moduleGetter[moduleName]();\n  if (isPromiseModule(result)) {\n    return result.then(module => {\n      moduleGetter[moduleName] = () => module;\n      return module;\n    });\n  } else {\n    return result;\n  }\n}\nfunction getModuleListByNames(moduleNames: string[], moduleGetter: ModuleGetter): Promise<Module[]> {\n  const preModules = moduleNames.map(moduleName => {\n    const module = getModuleByName(moduleName, moduleGetter);\n    if (isPromiseModule(module)) {\n      return module;\n    } else {\n      return Promise.resolve(module);\n    }\n  });\n  return Promise.all(preModules);\n}\nexport interface StoreOptions {\n  ssrInitStoreKey?: string;\n  reducers?: ReducersMapObject;\n  middlewares?: Middleware[];\n  enhancers?: StoreEnhancer[];\n  initData?: {[key: string]: any};\n}\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (store: Store, appModel: Model, appViews: {[key: string]: any}, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions = {}\n): Promise<void> {\n  MetaData.appModuleName = appModuleName;\n  const ssrInitStoreKey = storeOptions.ssrInitStoreKey || 'meduxInitStore';\n  let initData = {};\n  if (storeOptions.initData || window[ssrInitStoreKey]) {\n    initData = {...window[ssrInitStoreKey], ...storeOptions.initData};\n  }\n  const store = buildStore(initData, storeOptions.reducers, storeOptions.middlewares, storeOptions.enhancers);\n  const preModuleNames: string[] = [appModuleName];\n  if (initData) {\n    preModuleNames.push(...Object.keys(initData).filter(key => key !== appModuleName && initData[key].isModule));\n  }\n  return getModuleListByNames(preModuleNames, moduleGetter).then(([appModule]) => {\n    const initModel = appModule.default.model(store);\n    render(store as any, appModule.default.model, appModule.default.views, ssrInitStoreKey);\n    return initModel;\n  });\n}\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (store: Store, appModel: Model, appViews: {[key: string]: any}, ssrInitStoreKey: string) => {html: any; data: any; ssrInitStoreKey: string},\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions = {}\n) {\n  MetaData.appModuleName = appModuleName;\n  const ssrInitStoreKey = storeOptions.ssrInitStoreKey || 'meduxInitStore';\n  const store = buildStore(storeOptions.initData, storeOptions.reducers, storeOptions.middlewares, storeOptions.enhancers);\n  const appModule = moduleGetter[appModuleName]() as Module;\n\n  return appModule.default\n    .model(store)\n    .catch(err => {\n      return store.dispatch(errorAction(err));\n    })\n    .then(() => {\n      return render(store as any, appModule.default.model, appModule.default.views, ssrInitStoreKey);\n    });\n}\n"],"file":"module.js"}