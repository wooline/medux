{"version":3,"sources":["../../src/loading.ts"],"names":["loadings","depthTime","setLoadingDepthTime","second","setLoading","item","moduleName","group","MetaData","appModuleName","isServer","key","config","NSP","TaskCounter","addListener","TaskCountEvent","e","store","clientStore","actions","actionCreatorMap","ActionTypes","MLoading","action","data","dispatch","addItem"],"mappings":";;;;;;AAAA;;AACA;;AAEA;;AAEA,IAAMA,QAA6C,GAAG,EAAtD;AAEA,IAAIC,SAAS,GAAG,CAAhB;;AAEO,SAASC,mBAAT,CAA6BC,MAA7B,EAA6C;AAClDF,EAAAA,SAAS,GAAGE,MAAZ;AACD;;AACM,SAASC,UAAT,CAA4CC,IAA5C,EAAqDC,UAArD,EAAkGC,KAAlG,EAA+H;AAAA,MAA1ED,UAA0E;AAA1EA,IAAAA,UAA0E,GAArDE,gBAASC,aAA4C;AAAA;;AAAA,MAA7BF,KAA6B;AAA7BA,IAAAA,KAA6B,GAAb,QAAa;AAAA;;AACpI,MAAIC,gBAASE,QAAb,EAAuB;AACrB,WAAOL,IAAP;AACD;;AACD,MAAMM,GAAG,GAAGL,UAAU,GAAGM,cAAOC,GAApB,GAA0BN,KAAtC;;AACA,MAAI,CAACP,QAAQ,CAACW,GAAD,CAAb,EAAoB;AAClBX,IAAAA,QAAQ,CAACW,GAAD,CAAR,GAAgB,IAAIG,mBAAJ,CAAgBb,SAAhB,CAAhB;AACAD,IAAAA,QAAQ,CAACW,GAAD,CAAR,CAAcI,WAAd,CAA0BC,sBAA1B,EAA0C,UAAAC,CAAC,EAAI;AAC7C,UAAMC,KAAK,GAAGV,gBAASW,WAAvB;;AACA,UAAID,KAAJ,EAAW;AAAA;;AACT,YAAME,OAAO,GAAGZ,gBAASa,gBAAT,CAA0Bf,UAA1B,EAAsCgB,sBAAYC,QAAlD,CAAhB;AACA,YAAMC,MAAM,GAAGJ,OAAO,0BAAGb,KAAH,IAAWU,CAAC,CAACQ,IAAb,YAAtB;AACAP,QAAAA,KAAK,CAACQ,QAAN,CAAeF,MAAf;AACD;AACF,KAPD;AAQD;;AACDxB,EAAAA,QAAQ,CAACW,GAAD,CAAR,CAAcgB,OAAd,CAAsBtB,IAAtB;AACA,SAAOA,IAAP;AACD","sourcesContent":["import {MetaData, config} from './basic';\nimport {TaskCountEvent, TaskCounter} from './sprite';\n\nimport {ActionTypes} from './actions';\n\nconst loadings: {[moduleName: string]: TaskCounter} = {};\n\nlet depthTime = 2;\n\nexport function setLoadingDepthTime(second: number) {\n  depthTime = second;\n}\nexport function setLoading<T extends Promise<any>>(item: T, moduleName: string = MetaData.appModuleName, group: string = 'global'): T {\n  if (MetaData.isServer) {\n    return item;\n  }\n  const key = moduleName + config.NSP + group;\n  if (!loadings[key]) {\n    loadings[key] = new TaskCounter(depthTime);\n    loadings[key].addListener(TaskCountEvent, e => {\n      const store = MetaData.clientStore;\n      if (store) {\n        const actions = MetaData.actionCreatorMap[moduleName][ActionTypes.MLoading];\n        const action = actions({[group]: e.data});\n        store.dispatch(action);\n      }\n    });\n  }\n  loadings[key].addItem(item);\n  return item;\n}\n"],"file":"loading.js"}