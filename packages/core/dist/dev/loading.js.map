{"version":3,"sources":["../../src/loading.ts"],"names":["loadings","depthTime","setLoadingDepthTime","second","setLoading","item","namespace","MetaData","appModuleName","group","isServer","key","NSP","TaskCounter","addListener","TaskCountEvent","e","store","clientStore","actions","ActionTypes","M_LOADING","action","data","dispatch","addItem"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,QAA4C,GAAG,EAArD;AAEA,IAAIC,SAAS,GAAG,CAAhB;;AAEO,SAASC,mBAAT,CAA6BC,MAA7B,EAA6C;AAClDF,EAAAA,SAAS,GAAGE,MAAZ;AACD;;AACM,SAASC,UAAT,CAA4CC,IAA5C,EAA8H;AAAA,MAAzEC,SAAyE,uEAArDC,iBAASC,aAA4C;AAAA,MAA7BC,KAA6B,uEAAb,QAAa;;AACnI,MAAIF,iBAASG,QAAb,EAAuB;AACrB,WAAOL,IAAP;AACD;;AACD,MAAMM,GAAG,GAAGL,SAAS,GAAGM,WAAZ,GAAkBH,KAA9B;;AACA,MAAI,CAACT,QAAQ,CAACW,GAAD,CAAb,EAAoB;AAClBX,IAAAA,QAAQ,CAACW,GAAD,CAAR,GAAgB,IAAIE,mBAAJ,CAAgBZ,SAAhB,CAAhB;AACAD,IAAAA,QAAQ,CAACW,GAAD,CAAR,CAAcG,WAAd,CAA0BC,sBAA1B,EAA0C,UAAAC,CAAC,EAAI;AAC7C,UAAMC,KAAK,GAAGV,iBAASW,WAAvB;;AACA,UAAID,KAAJ,EAAW;AACT,YAAME,OAAO,GAAG,wCAA2Bb,SAA3B,EAAsCc,sBAAYC,SAAlD,CAAhB;;AACA,YAAMC,MAAM,GAAGH,OAAO,mCAAGV,KAAH,EAAWO,CAAC,CAACO,IAAb,EAAtB;AACAN,QAAAA,KAAK,CAACO,QAAN,CAAeF,MAAf;AACD;AACF,KAPD;AAQD;;AACDtB,EAAAA,QAAQ,CAACW,GAAD,CAAR,CAAcc,OAAd,CAAsBpB,IAAtB;AACA,SAAOA,IAAP;AACD","sourcesContent":["import {MetaData, getModuleActionCreatorList, NSP} from './global';\nimport {TaskCounter, TaskCountEvent} from './sprite';\nimport {ActionTypes} from './actions';\n\nconst loadings: {[namespace: string]: TaskCounter} = {};\n\nlet depthTime = 2;\n\nexport function setLoadingDepthTime(second: number) {\n  depthTime = second;\n}\nexport function setLoading<T extends Promise<any>>(item: T, namespace: string = MetaData.appModuleName, group: string = 'global'): T {\n  if (MetaData.isServer) {\n    return item;\n  }\n  const key = namespace + NSP + group;\n  if (!loadings[key]) {\n    loadings[key] = new TaskCounter(depthTime);\n    loadings[key].addListener(TaskCountEvent, e => {\n      const store = MetaData.clientStore;\n      if (store) {\n        const actions = getModuleActionCreatorList(namespace)[ActionTypes.M_LOADING];\n        const action = actions({[group]: e.data});\n        store.dispatch(action);\n      }\n    });\n  }\n  loadings[key].addItem(item);\n  return item;\n}\n"],"file":"loading.js"}