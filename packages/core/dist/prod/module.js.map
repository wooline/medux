{"version":3,"sources":["../../src/module.ts"],"names":["MetaData","defaultRouteParams","injectActions","isPromise","reducer","ActionTypes","errorAction","buildStore","exportModule","moduleName","initState","ActionHandles","views","routeParams","model","store","hasInjected","_medux_","injectedModules","moduleState","getState","handlers","actions","params","rootState","route","data","initAction","INIT","result","dispatch","catch","err","then","simpleEqual","obj1","obj2","keys1","Object","keys","keys2","length","key","BaseModelHandlers","isModule","prevState","currentState","action","handler","actionCreatorMap","__actionName__","state","routeData","payload","mergeRouteState","loading","callThisAction","UPDATE","F_ROUTE_CHANGE","isPromiseModule","module","isPromiseView","moduleView","exportActions","moduleGetter","reduce","maps","Proxy","get","target","type","set","injectModel","default","getView","viewName","view","isServer","initModel","clientStore","getModuleByName","getModuleListByNames","moduleNames","preModules","map","Promise","resolve","all","renderApp","render","appModuleName","history","storeOptions","ssrInitStoreKey","initData","window","reducers","middlewares","enhancers","preModuleNames","push","filter","appModule","renderSSR","initAppModel"],"mappings":"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","sourcesContent":["import {Action, ActionCreatorList, ActionHandler, BaseModelState, MetaData, ModelStore, RouteState, defaultRouteParams, injectActions, isPromise, reducer} from './basic';\nimport {ActionTypes, errorAction} from './actions';\nimport {HistoryProxy, buildStore} from './store';\nimport {Middleware, ReducersMapObject, Store, StoreEnhancer} from 'redux';\n\nexport interface Model<ModelState extends BaseModelState = BaseModelState> {\n  moduleName: string;\n  initState: ModelState;\n  (store: ModelStore): void | Promise<void>;\n}\n\nexport interface Module<M extends Model = Model, VS extends {[key: string]: any} = {[key: string]: any}, AS extends ActionCreatorList = {}, N extends string = string> {\n  default: {\n    moduleName: N;\n    model: M;\n    views: VS;\n    actions: AS;\n  };\n}\n\nexport interface ModuleGetter {\n  [moduleName: string]: () => Module | Promise<Module>;\n}\n\ntype ReturnModule<T> = T extends () => Promise<infer R> ? R : T extends () => infer R ? R : never;\n// export type ReturnViews<T extends () => any> = T extends () => Promise<Module<Model, infer R>> ? R : T extends () => Module<Model, infer R> ? R : never;\ntype ModuleName<M extends any> = M['default']['moduleName'];\ntype ModuleStates<M extends any> = M['default']['model']['initState'];\ntype ModuleParams<M extends any> = M['default']['model']['initState']['routeParams'];\ntype ModuleViews<M extends any> = M['default']['views'];\ntype ModuleActions<M extends any> = M['default']['actions'];\ntype MountViews<M extends any> = {[key in keyof M['default']['views']]?: boolean};\nexport type RootState<G extends ModuleGetter, L> = {\n  route: {\n    location: L;\n    data: {\n      views: {[key in keyof G]?: MountViews<ReturnModule<G[key]>>};\n      params: {[key in keyof G]?: ModuleParams<ReturnModule<G[key]>>};\n      paths: any;\n    };\n  };\n} & {[key in keyof G]?: ModuleStates<ReturnModule<G[key]>>};\n\nexport type ExportModule<Component> = <S extends BaseModelState, V extends {[key: string]: Component}, T extends BaseModelHandlers<S, any>, N extends string>(\n  moduleName: N,\n  initState: S,\n  ActionHandles: {new (moduleName: string, store: any, initState: any, presetData?: any): T},\n  views: V\n) => Module<Model<S>, V, Actions<T>, N>['default'];\n\nexport const exportModule: ExportModule<any> = (moduleName, initState, ActionHandles, views) => {\n  defaultRouteParams[moduleName] = initState.routeParams;\n  const model = (store: ModelStore) => {\n    const hasInjected = store._medux_.injectedModules[moduleName];\n    if (!hasInjected) {\n      store._medux_.injectedModules[moduleName] = true;\n      const moduleState: BaseModelState = store.getState()[moduleName];\n      const handlers = new ActionHandles(moduleName, store, initState, moduleState);\n      const actions = injectActions(store, moduleName, handlers as any);\n      (handlers as any).actions = actions;\n      if (!moduleState) {\n        const params = (handlers.rootState.route as RouteState).data.params || {};\n        const initAction = actions.INIT({...initState, routeParams: params[moduleName]});\n        const result = store.dispatch(initAction);\n        if (isPromise(result)) {\n          return result\n            .catch(err => {\n              return store.dispatch(errorAction(err)) as any;\n            })\n            .then(() => void 0);\n        }\n      }\n    }\n    return void 0;\n  };\n  model.moduleName = moduleName;\n  model.initState = initState;\n  const actions = {} as any;\n  return {\n    moduleName,\n    model,\n    views,\n    actions,\n  };\n};\n\nfunction simpleEqual(obj1: any, obj2: any): boolean {\n  if (obj1 === obj2) {\n    return true;\n  } else if (typeof obj1 !== typeof obj2 || typeof obj1 !== 'object') {\n    return false;\n  } else {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n      return false;\n    } else {\n      for (const key of keys1) {\n        if (!simpleEqual(obj1[key], obj2[key])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n}\nexport abstract class BaseModelHandlers<S extends BaseModelState, R> {\n  protected readonly actions: Actions<this> = null as any;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public constructor(protected readonly moduleName: string, protected readonly store: ModelStore, protected readonly initState: S, presetData?: any) {\n    initState.isModule = true;\n  }\n\n  public get state(): S {\n    return this.store._medux_.prevState[this.moduleName];\n  }\n\n  public get rootState(): R {\n    return this.store._medux_.prevState as R;\n  }\n\n  public get currentState(): S {\n    return this.store._medux_.currentState[this.moduleName];\n  }\n\n  public get currentRootState(): R {\n    return this.store._medux_.currentState as R;\n  }\n\n  protected dispatch(action: Action): Action | Promise<void> {\n    return this.store.dispatch(action) as any;\n  }\n\n  protected callThisAction<T extends any[]>(handler: (...args: T) => any, ...rest: T): {type: string; playload?: any} {\n    const actions = MetaData.actionCreatorMap[this.moduleName];\n    return actions[(handler as ActionHandler).__actionName__](rest[0]);\n  }\n\n  protected mergeRouteState(state: S, routeData: RouteState): S {\n    if (routeData.data.views[this.moduleName]) {\n      const routeParams = routeData.data.params[this.moduleName];\n      if (!simpleEqual(routeParams, state.routeParams)) {\n        return {...state, routeParams: routeParams};\n      }\n    }\n    return state;\n  }\n  @reducer\n  protected INIT(payload: S): S {\n    return this.mergeRouteState(payload, this.rootState['route']);\n  }\n\n  @reducer\n  protected UPDATE(payload: S): S {\n    return payload;\n  }\n\n  @reducer\n  protected LOADING(payload: {[group: string]: string}): S {\n    const state = this.state;\n    if (!state) {\n      return state;\n    }\n    return {\n      ...state,\n      loading: {...state.loading, ...payload},\n    };\n  }\n\n  protected updateState(payload: Partial<S>) {\n    this.dispatch(this.callThisAction(this.UPDATE, {...this.state, ...payload}));\n  }\n\n  @reducer\n  protected [ActionTypes.F_ROUTE_CHANGE](routeData: RouteState): S {\n    return this.mergeRouteState(this.state, routeData);\n  }\n}\n\ntype Handler<F> = F extends (...args: infer P) => any\n  ? (\n      ...args: P\n    ) => {\n      type: string;\n    }\n  : never;\n\nexport type Actions<Ins> = {[K in keyof Ins]: Ins[K] extends (...args: any[]) => any ? Handler<Ins[K]> : never};\n\nexport function isPromiseModule(module: Module | Promise<Module>): module is Promise<Module> {\n  return typeof module['then'] === 'function';\n}\nexport function isPromiseView<T>(moduleView: T | Promise<T>): moduleView is Promise<T> {\n  return typeof moduleView['then'] === 'function';\n}\n\nexport function exportActions<G extends {[N in keyof G]: N extends ModuleName<ReturnModule<G[N]>> ? G[N] : never}>(moduleGetter: G): {[key in keyof G]: ModuleActions<ReturnModule<G[key]>>} {\n  MetaData.moduleGetter = moduleGetter as any;\n  MetaData.actionCreatorMap = Object.keys(moduleGetter).reduce((maps, moduleName) => {\n    maps[moduleName] =\n      typeof Proxy === 'undefined'\n        ? {}\n        : new Proxy(\n            {},\n            {\n              get: (target: {}, key: string) => {\n                return (payload: any) => ({type: moduleName + '/' + key, payload});\n              },\n              set: () => {\n                return true;\n              },\n            }\n          );\n    return maps;\n  }, {});\n  return MetaData.actionCreatorMap as any;\n}\n\nexport function injectModel<MG extends ModuleGetter, N extends Extract<keyof MG, string>>(moduleGetter: MG, moduleName: N, store: ModelStore): void | Promise<void> {\n  const hasInjected = store._medux_.injectedModules[moduleName];\n  if (!hasInjected) {\n    moduleGetter = MetaData.moduleGetter as any;\n    const result = moduleGetter[moduleName]();\n    if (isPromiseModule(result)) {\n      return result.then(module => {\n        moduleGetter[moduleName] = (() => module) as any;\n        return module.default.model(store);\n      });\n    } else {\n      return result.default.model(store);\n    }\n  }\n}\n\nexport function getView<T>(moduleGetter: ModuleGetter, moduleName: string, viewName: string): T | Promise<T> {\n  moduleGetter = MetaData.moduleGetter;\n  const result = moduleGetter[moduleName]();\n  if (isPromiseModule(result)) {\n    return result.then(module => {\n      moduleGetter[moduleName] = () => module;\n      const view: T = module.default.views[viewName];\n      if (MetaData.isServer) {\n        return view;\n      }\n      const initModel = module.default.model(MetaData.clientStore);\n      if (isPromise(initModel)) {\n        return initModel.then(() => view);\n      } else {\n        return view;\n      }\n    });\n  } else {\n    const view: T = result.default.views[viewName];\n    if (MetaData.isServer) {\n      return view;\n    }\n    const initModel = result.default.model(MetaData.clientStore);\n    if (isPromise(initModel)) {\n      return initModel.then(() => view);\n    } else {\n      return view;\n    }\n  }\n}\n\nexport type LoadView = <MG extends ModuleGetter, M extends Extract<keyof MG, string>, V extends ModuleViews<ReturnModule<MG[M]>>, N extends Extract<keyof V, string>>(\n  moduleGetter: MG,\n  moduleName: M,\n  viewName: N\n) => V[N];\n\nfunction getModuleByName(moduleName: string, moduleGetter: ModuleGetter): Promise<Module> | Module {\n  const result = moduleGetter[moduleName]();\n  if (isPromiseModule(result)) {\n    return result.then(module => {\n      //在SSR时loadView不能出现异步，否则浏览器初轮渲染不会包括异步组件，从而导致和服务器返回不一致\n      moduleGetter[moduleName] = () => module;\n      return module;\n    });\n  } else {\n    return result;\n  }\n}\nfunction getModuleListByNames(moduleNames: string[], moduleGetter: ModuleGetter): Promise<Module[]> {\n  const preModules = moduleNames.map(moduleName => {\n    const module = getModuleByName(moduleName, moduleGetter);\n    if (isPromiseModule(module)) {\n      return module;\n    } else {\n      return Promise.resolve(module);\n    }\n  });\n  return Promise.all(preModules);\n}\nexport interface StoreOptions {\n  ssrInitStoreKey?: string;\n  reducers?: ReducersMapObject;\n  middlewares?: Middleware[];\n  enhancers?: StoreEnhancer[];\n  initData?: {[key: string]: any};\n}\n\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (store: Store, appModel: Model, appViews: {[key: string]: any}, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  history: HistoryProxy,\n  storeOptions: StoreOptions = {}\n): Promise<void> {\n  MetaData.appModuleName = appModuleName;\n  const ssrInitStoreKey = storeOptions.ssrInitStoreKey || 'meduxInitStore';\n  let initData = {};\n  if (storeOptions.initData || window[ssrInitStoreKey]) {\n    initData = {...window[ssrInitStoreKey], ...storeOptions.initData};\n  }\n  const store = buildStore(history, initData, storeOptions.reducers, storeOptions.middlewares, storeOptions.enhancers);\n  const preModuleNames: string[] = [appModuleName];\n  if (initData) {\n    preModuleNames.push(...Object.keys(initData).filter(key => key !== appModuleName && initData[key].isModule));\n  }\n  return getModuleListByNames(preModuleNames, moduleGetter).then(([appModule]) => {\n    const initModel = appModule.default.model(store);\n    render(store as any, appModule.default.model, appModule.default.views, ssrInitStoreKey);\n    return initModel;\n  });\n}\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (store: Store, appModel: Model, appViews: {[key: string]: any}, ssrInitStoreKey: string) => {html: any; data: any; ssrInitStoreKey: string},\n  moduleGetter: M,\n  appModuleName: A,\n  history: HistoryProxy,\n  storeOptions: StoreOptions = {}\n) {\n  MetaData.appModuleName = appModuleName;\n  const ssrInitStoreKey = storeOptions.ssrInitStoreKey || 'meduxInitStore';\n  const store = buildStore(history, storeOptions.initData, storeOptions.reducers, storeOptions.middlewares, storeOptions.enhancers);\n  const appModule = moduleGetter[appModuleName]() as Module;\n  let initAppModel = appModule.default.model(store);\n  if (!isPromise(initAppModel)) {\n    initAppModel = Promise.resolve();\n  }\n  return initAppModel.then(() => {\n    return render(store as any, appModule.default.model, appModule.default.views, ssrInitStoreKey);\n  });\n}\n"],"file":"module.js"}