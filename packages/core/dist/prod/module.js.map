{"version":3,"sources":["../../src/module.ts"],"names":["reducer","getModuleActionCreatorList","isPromise","injectActions","MetaData","buildStore","errorAction","exportFacade","moduleName","actions","exportModule","loadModel","views","model","BaseModuleHandlers","initState","store","isModule","dispatch","action","callThisAction","handler","__actionName__","INIT","payload","UPDATE","LOADING","state","loading","updateState","_medux_","prevState","currentState","exportModel","HandlersClass","wrap","loadModule","hasInjected","injectedModules","moduleState","getState","handlers","initAction","Promise","resolve","isPromiseModule","module","isPromiseView","moduleView","getModule","result","then","default","getView","viewName","getModuleByName","moduleGetter","getModuleListByNames","moduleNames","preModules","map","all","renderApp","render","appModuleName","storeOptions","ssrInitStoreKey","initData","window","reducers","middlewares","enhancers","preModuleNames","push","Object","keys","filter","key","appModule","initModel","renderSSR","catch","err"],"mappings":"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","sourcesContent":["import {Middleware, ReducersMapObject, StoreEnhancer, Store} from 'redux';\nimport {Action, ActionHandler, ActionCreatorList, reducer, getModuleActionCreatorList, ModelStore, BaseModuleState, isPromise, injectActions, MetaData} from './basic';\nimport {buildStore} from './store';\nimport {errorAction} from './actions';\n\nexport interface Model<ModuleState extends BaseModuleState = BaseModuleState> {\n  moduleName: string;\n  initState: ModuleState;\n  (store: ModelStore): Promise<void>;\n}\n\nexport interface Module<M extends Model = Model, VS extends {[key: string]: any} = {[key: string]: any}> {\n  default: {\n    moduleName: string;\n    model: M;\n    views: VS;\n  };\n}\nexport type GetModule<M extends Module = Module> = () => M | Promise<M>;\n\nexport interface ModuleGetter {\n  [moduleName: string]: GetModule;\n}\nexport type ReturnModule<T extends () => any> = T extends () => Promise<infer R> ? R : T extends () => infer R ? R : never;\nexport type ReturnViews<T extends () => any> = T extends () => Promise<Module<Model, infer R>> ? R : never;\ntype ModuleStates<M extends any> = M['model']['initState'];\ntype ModuleViews<M extends any> = {[key in keyof M['views']]?: number};\n\nexport type RootState<G extends ModuleGetter = {}> = {\n  views: {[key in keyof G]?: ModuleViews<ReturnModule<G[key]>>};\n} & {[key in keyof G]?: ModuleStates<ReturnModule<G[key]>>};\n\nexport function exportFacade<T extends ActionCreatorList>(moduleName: string) {\n  const actions: T = getModuleActionCreatorList(moduleName) as T;\n  return {\n    moduleName,\n    actions,\n  };\n}\nexport function exportModule<L extends (moduleName?: string) => Model, V, N extends string>(moduleName: N, loadModel: L, views: V): Module<ReturnType<L>, V>['default'] {\n  return {\n    moduleName,\n    model: loadModel(moduleName) as any,\n    views,\n  };\n}\nexport class BaseModuleHandlers<S extends BaseModuleState, R extends RootState> {\n  protected readonly initState: S;\n  protected readonly moduleName: string = '';\n  protected readonly store: ModelStore = null as any;\n  protected readonly actions: Actions<this> = null as any;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public constructor(initState: S, presetData?: any) {\n    initState.isModule = true;\n    this.initState = initState;\n  }\n\n  protected get state(): S {\n    return this.store._medux_.prevState[this.moduleName];\n  }\n\n  protected get rootState(): R {\n    return this.store._medux_.prevState as R;\n  }\n\n  protected get currentState(): S {\n    return this.store._medux_.currentState[this.moduleName];\n  }\n\n  protected get currentRootState(): R {\n    return this.store._medux_.currentState as R;\n  }\n\n  protected dispatch(action: Action): Action | Promise<void> {\n    return this.store.dispatch(action) as any;\n  }\n\n  protected callThisAction<T extends any[]>(handler: (...args: T) => any, ...rest: T): {type: string; playload?: any} {\n    const actions = getModuleActionCreatorList(this.moduleName);\n    return actions[(handler as ActionHandler).__actionName__](rest[0]);\n  }\n\n  @reducer\n  protected INIT(payload: S): S {\n    return payload;\n  }\n\n  @reducer\n  protected UPDATE(payload: S): S {\n    return payload;\n  }\n\n  @reducer\n  protected LOADING(payload: {[group: string]: string}): S {\n    const state = this.state;\n    if (!state) {\n      return state;\n    }\n    return {\n      ...state,\n      loading: {...state.loading, ...payload},\n    };\n  }\n\n  protected updateState(payload: Partial<S>) {\n    this.dispatch(this.callThisAction(this.UPDATE, {...this.state, ...payload}));\n  }\n}\n\ntype Handler<F> = F extends (...args: infer P) => any\n  ? (\n      ...args: P\n    ) => {\n      type: string;\n    }\n  : never;\n\nexport type Actions<Ins> = {[K in keyof Ins]: Ins[K] extends (...args: any[]) => any ? Handler<Ins[K]> : never};\nexport function exportModel<S extends BaseModuleState>(\n  HandlersClass: {new (initState: S, presetData?: any): BaseModuleHandlers<BaseModuleState, RootState>},\n  initState: S\n): (moduleName?: string) => Model<S> {\n  const wrap: {(moduleName?: string): Model<S>; loadModule?: Model<S>} = (moduleName: string = '') => {\n    if (!wrap.loadModule) {\n      wrap.loadModule = ((store: ModelStore) => {\n        const hasInjected = store._medux_.injectedModules[moduleName];\n        if (!hasInjected) {\n          store._medux_.injectedModules[moduleName] = true;\n          const moduleState: BaseModuleState = store.getState()[moduleName];\n          const handlers = new HandlersClass(initState, moduleState);\n          (handlers as any).moduleName = moduleName;\n          (handlers as any).store = store;\n          const actions = injectActions(store, moduleName, handlers as any);\n          (handlers as any).actions = actions;\n          if (!moduleState) {\n            const initAction = actions.INIT((handlers as any).initState);\n            const action = store.dispatch(initAction);\n            if (isPromise(action)) {\n              return action;\n            } else {\n              return Promise.resolve(void 0);\n            }\n          } else {\n            return Promise.resolve(void 0);\n          }\n        } else {\n          return Promise.resolve(void 0);\n        }\n      }) as any;\n      wrap.loadModule!.moduleName = moduleName;\n      wrap.loadModule!.initState = initState;\n    }\n    return wrap.loadModule!;\n  };\n  return wrap;\n}\nexport function isPromiseModule(module: Module | Promise<Module>): module is Promise<Module> {\n  return typeof module['then'] === 'function';\n}\nexport function isPromiseView<T>(moduleView: T | Promise<T>): moduleView is Promise<T> {\n  return typeof moduleView['then'] === 'function';\n}\nexport function loadModel<M extends Module>(getModule: GetModule<M>): Promise<M['default']['model']> {\n  const result = getModule();\n  if (isPromiseModule(result)) {\n    return result.then(module => module.default.model);\n  } else {\n    return Promise.resolve(result.default.model);\n  }\n}\nexport function getView<M extends Module, N extends Extract<keyof M['default']['views'], string>>(getModule: GetModule<M>, viewName: N): M['default']['views'][N] | Promise<M['default']['views'][N]> {\n  const result = getModule();\n  if (isPromiseModule(result)) {\n    return result.then(module => module.default.views[viewName]);\n  } else {\n    return result.default.views[viewName];\n  }\n}\nexport type ExportView<C> = (ComponentView: C, loadModel: (moduleName?: string) => Model, viewName: string) => C;\n\nexport type LoadView = <MG extends ModuleGetter, M extends Extract<keyof MG, string>, V extends ReturnViews<MG[M]>, N extends Extract<keyof V, string>>(\n  moduleGetter: MG,\n  moduleName: M,\n  viewName: N\n) => V[N];\n\nfunction getModuleByName(moduleName: string, moduleGetter: ModuleGetter): Promise<Module> | Module {\n  const result = moduleGetter[moduleName]();\n  if (isPromiseModule(result)) {\n    return result.then(module => {\n      moduleGetter[moduleName] = () => module;\n      return module;\n    });\n  } else {\n    return result;\n  }\n}\nfunction getModuleListByNames(moduleNames: string[], moduleGetter: ModuleGetter): Promise<Module[]> {\n  const preModules = moduleNames.map(moduleName => {\n    const module = getModuleByName(moduleName, moduleGetter);\n    if (isPromiseModule(module)) {\n      return module;\n    } else {\n      return Promise.resolve(module);\n    }\n  });\n  return Promise.all(preModules);\n}\nexport interface StoreOptions {\n  ssrInitStoreKey?: string;\n  reducers?: ReducersMapObject;\n  middlewares?: Middleware[];\n  enhancers?: StoreEnhancer[];\n  initData?: {[key: string]: any};\n}\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (store: Store, appModel: Model, appViews: {[key: string]: any}, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions = {}\n): Promise<void> {\n  MetaData.appModuleName = appModuleName;\n  const ssrInitStoreKey = storeOptions.ssrInitStoreKey || 'meduxInitStore';\n  let initData = {};\n  if (storeOptions.initData || window[ssrInitStoreKey]) {\n    initData = {...window[ssrInitStoreKey], ...storeOptions.initData};\n  }\n  const store = buildStore(initData, storeOptions.reducers, storeOptions.middlewares, storeOptions.enhancers);\n  const preModuleNames: string[] = [appModuleName];\n  if (initData) {\n    preModuleNames.push(...Object.keys(initData).filter(key => key !== appModuleName && initData[key].isModule));\n  }\n  return getModuleListByNames(preModuleNames, moduleGetter).then(([appModule]) => {\n    const initModel = appModule.default.model(store);\n    render(store as any, appModule.default.model, appModule.default.views, ssrInitStoreKey);\n    return initModel;\n  });\n}\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (store: Store, appModel: Model, appViews: {[key: string]: any}, ssrInitStoreKey: string) => {html: any; data: any; ssrInitStoreKey: string},\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions = {}\n) {\n  MetaData.appModuleName = appModuleName;\n  const ssrInitStoreKey = storeOptions.ssrInitStoreKey || 'meduxInitStore';\n  const store = buildStore(storeOptions.initData, storeOptions.reducers, storeOptions.middlewares, storeOptions.enhancers);\n  const appModule = moduleGetter[appModuleName]() as Module;\n\n  return appModule.default\n    .model(store)\n    .catch(err => {\n      return store.dispatch(errorAction(err));\n    })\n    .then(() => {\n      return render(store as any, appModule.default.model, appModule.default.views, ssrInitStoreKey);\n    });\n}\n"],"file":"module.js"}