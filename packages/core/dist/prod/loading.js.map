{"version":3,"sources":["../../src/loading.ts"],"names":["MetaData","getModuleActionCreatorList","NSP","TaskCounter","TaskCountEvent","ActionTypes","loadings","depthTime","setLoadingDepthTime","second","setLoading","item","namespace","group","appModuleName","isServer","key","addListener","e","store","clientStore","actions","M_LOADING","action","data","dispatch","addItem"],"mappings":"AAAA,OAAQA,QAAR,CAAkBC,0BAAlB,CAA8CC,GAA9C,KAAwD,SAAxD,CACA,OAAQC,WAAR,CAAqBC,cAArB,KAA0C,UAA1C,CACA,OAAQC,WAAR,KAA0B,WAA1B,C,GAEMC,CAAAA,QAA4C,CAAG,E,CAEjDC,SAAS,CAAG,C,CAEhB,MAAO,SAASC,CAAAA,mBAAT,CAA6BC,CAA7B,CAA6C,CAClDF,SAAS,CAAGE,CACb,CACD,MAAO,SAASC,CAAAA,UAAT,CAA4CC,CAA5C,CAAqDC,CAArD,CAAiGC,CAAjG,CAA8H,CACnI,YAD0DD,CAC1D,GAD0DA,CAC1D,CAD8EZ,QAAQ,CAACc,aACvF,WADsGD,CACtG,GADsGA,CACtG,CADsH,QACtH,EAAIb,QAAQ,CAACe,QAAb,CACE,MAAOJ,CAAAA,CAAP,CAEF,GAAMK,CAAAA,CAAG,CAAGJ,CAAS,CAAGV,GAAZ,CAAkBW,CAA9B,CAaA,MAZKP,CAAAA,QAAQ,CAACU,CAAD,CAYb,GAXEV,QAAQ,CAACU,CAAD,CAAR,CAAgB,GAAIb,CAAAA,WAAJ,CAAgBI,SAAhB,CAWlB,CAVED,QAAQ,CAACU,CAAD,CAAR,CAAcC,WAAd,CAA0Bb,cAA1B,CAA0C,SAAAc,CAAC,CAAI,CAC7C,GAAMC,CAAAA,CAAK,CAAGnB,QAAQ,CAACoB,WAAvB,CACA,GAAID,CAAJ,CAAW,OACHE,CAAO,CAAGpB,0BAA0B,CAACW,CAAD,CAA1B,CAAsCP,WAAW,CAACiB,SAAlD,CADP,CAEHC,CAAM,CAAGF,CAAO,SAAGR,CAAH,EAAWK,CAAC,CAACM,IAAb,IAFb,CAGTL,CAAK,CAACM,QAAN,CAAeF,CAAf,CACD,CACF,CAPD,CAUF,EADAjB,QAAQ,CAACU,CAAD,CAAR,CAAcU,OAAd,CAAsBf,CAAtB,CACA,CAAOA,CACR","sourcesContent":["import {MetaData, getModuleActionCreatorList, NSP} from './basic';\nimport {TaskCounter, TaskCountEvent} from './sprite';\nimport {ActionTypes} from './actions';\n\nconst loadings: {[namespace: string]: TaskCounter} = {};\n\nlet depthTime = 2;\n\nexport function setLoadingDepthTime(second: number) {\n  depthTime = second;\n}\nexport function setLoading<T extends Promise<any>>(item: T, namespace: string = MetaData.appModuleName, group: string = 'global'): T {\n  if (MetaData.isServer) {\n    return item;\n  }\n  const key = namespace + NSP + group;\n  if (!loadings[key]) {\n    loadings[key] = new TaskCounter(depthTime);\n    loadings[key].addListener(TaskCountEvent, e => {\n      const store = MetaData.clientStore;\n      if (store) {\n        const actions = getModuleActionCreatorList(namespace)[ActionTypes.M_LOADING];\n        const action = actions({[group]: e.data});\n        store.dispatch(action);\n      }\n    });\n  }\n  loadings[key].addItem(item);\n  return item;\n}\n"],"file":"loading.js"}