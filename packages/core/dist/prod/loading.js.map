{"version":3,"sources":["../../src/loading.ts"],"names":["MetaData","config","TaskCountEvent","TaskCounter","ActionTypes","loadings","depthTime","setLoadingDepthTime","second","setLoading","item","moduleName","group","appModuleName","isServer","key","NSP","addListener","e","store","clientStore","actions","actionCreatorMap","MLoading","action","data","dispatch","addItem"],"mappings":"AAAA,OAAQA,QAAR,CAAkBC,MAAlB,KAA+B,SAA/B,CACA,OAAQC,cAAR,CAAwBC,WAAxB,KAA0C,UAA1C,CAEA,OAAQC,WAAR,KAA0B,WAA1B,C,GAEMC,CAAAA,QAA6C,CAAG,E,CAElDC,SAAS,CAAG,C,CAEhB,MAAO,SAASC,CAAAA,mBAAT,CAA6BC,CAA7B,CAA6C,CAClDF,SAAS,CAAGE,CACb,CACD,MAAO,SAASC,CAAAA,UAAT,CAA4CC,CAA5C,CAAqDC,CAArD,CAAkGC,CAAlG,CAA+H,CACpI,YAD0DD,CAC1D,GAD0DA,CAC1D,CAD+EX,QAAQ,CAACa,aACxF,WADuGD,CACvG,GADuGA,CACvG,CADuH,QACvH,EAAIZ,QAAQ,CAACc,QAAb,CACE,MAAOJ,CAAAA,CAAP,CAEF,GAAMK,CAAAA,CAAG,CAAGJ,CAAU,CAAGV,MAAM,CAACe,GAApB,CAA0BJ,CAAtC,CAaA,MAZKP,CAAAA,QAAQ,CAACU,CAAD,CAYb,GAXEV,QAAQ,CAACU,CAAD,CAAR,CAAgB,GAAIZ,CAAAA,WAAJ,CAAgBG,SAAhB,CAWlB,CAVED,QAAQ,CAACU,CAAD,CAAR,CAAcE,WAAd,CAA0Bf,cAA1B,CAA0C,SAAAgB,CAAC,CAAI,CAC7C,GAAMC,CAAAA,CAAK,CAAGnB,QAAQ,CAACoB,WAAvB,CACA,GAAID,CAAJ,CAAW,OACHE,CAAO,CAAGrB,QAAQ,CAACsB,gBAAT,CAA0BX,CAA1B,EAAsCP,WAAW,CAACmB,QAAlD,CADP,CAEHC,CAAM,CAAGH,CAAO,SAAGT,CAAH,EAAWM,CAAC,CAACO,IAAb,IAFb,CAGTN,CAAK,CAACO,QAAN,CAAeF,CAAf,CACD,CACF,CAPD,CAUF,EADAnB,QAAQ,CAACU,CAAD,CAAR,CAAcY,OAAd,CAAsBjB,CAAtB,CACA,CAAOA,CACR","sourcesContent":["import {MetaData, config} from './basic';\nimport {TaskCountEvent, TaskCounter} from './sprite';\n\nimport {ActionTypes} from './actions';\n\nconst loadings: {[moduleName: string]: TaskCounter} = {};\n\nlet depthTime = 2;\n\nexport function setLoadingDepthTime(second: number) {\n  depthTime = second;\n}\nexport function setLoading<T extends Promise<any>>(item: T, moduleName: string = MetaData.appModuleName, group: string = 'global'): T {\n  if (MetaData.isServer) {\n    return item;\n  }\n  const key = moduleName + config.NSP + group;\n  if (!loadings[key]) {\n    loadings[key] = new TaskCounter(depthTime);\n    loadings[key].addListener(TaskCountEvent, e => {\n      const store = MetaData.clientStore;\n      if (store) {\n        const actions = MetaData.actionCreatorMap[moduleName][ActionTypes.MLoading];\n        const action = actions({[group]: e.data});\n        store.dispatch(action);\n      }\n    });\n  }\n  loadings[key].addItem(item);\n  return item;\n}\n"],"file":"loading.js"}