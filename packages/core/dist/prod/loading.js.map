{"version":3,"sources":["../../src/loading.ts"],"names":["loadings","depthTime","setLoadingDepthTime","second","setLoading","item","moduleName","group","MetaData","appModuleName","isServer","key","config","NSP","TaskCounter","addListener","TaskCountEvent","e","store","clientStore","actions","actionCreatorMap","ActionTypes","MLoading","action","data","dispatch","addItem"],"mappings":"0MAKMA,QAA6C,CAAG,E,CAElDC,SAAS,CAAG,C,CAET,QAASC,CAAAA,mBAAT,CAA6BC,CAA7B,CAA6C,CAClDF,SAAS,CAAGE,CACb,CACM,QAASC,CAAAA,UAAT,CAA4CC,CAA5C,CAAqDC,CAArD,CAAkGC,CAAlG,CAA+H,CACpI,YAD0DD,CAC1D,GAD0DA,CAC1D,CAD+EE,gBAASC,aACxF,WADuGF,CACvG,GADuGA,CACvG,CADuH,QACvH,EAAIC,gBAASE,QAAb,CACE,MAAOL,CAAAA,CAAP,CAEF,GAAMM,CAAAA,CAAG,CAAGL,CAAU,CAAGM,cAAOC,GAApB,CAA0BN,CAAtC,CAaA,MAZKP,CAAAA,QAAQ,CAACW,CAAD,CAYb,GAXEX,QAAQ,CAACW,CAAD,CAAR,CAAgB,GAAIG,oBAAJ,CAAgBb,SAAhB,CAWlB,CAVED,QAAQ,CAACW,CAAD,CAAR,CAAcI,WAAd,CAA0BC,sBAA1B,CAA0C,SAAAC,CAAC,CAAI,CAC7C,GAAMC,CAAAA,CAAK,CAAGV,gBAASW,WAAvB,CACA,GAAID,CAAJ,CAAW,OACHE,CAAO,CAAGZ,gBAASa,gBAAT,CAA0Bf,CAA1B,EAAsCgB,sBAAYC,QAAlD,CADP,CAEHC,CAAM,CAAGJ,CAAO,SAAGb,CAAH,EAAWU,CAAC,CAACQ,IAAb,IAFb,CAGTP,CAAK,CAACQ,QAAN,CAAeF,CAAf,CACD,CACF,CAPD,CAUF,EADAxB,QAAQ,CAACW,CAAD,CAAR,CAAcgB,OAAd,CAAsBtB,CAAtB,CACA,CAAOA,CACR","sourcesContent":["import {MetaData, config} from './basic';\nimport {TaskCountEvent, TaskCounter} from './sprite';\n\nimport {ActionTypes} from './actions';\n\nconst loadings: {[moduleName: string]: TaskCounter} = {};\n\nlet depthTime = 2;\n\nexport function setLoadingDepthTime(second: number) {\n  depthTime = second;\n}\nexport function setLoading<T extends Promise<any>>(item: T, moduleName: string = MetaData.appModuleName, group: string = 'global'): T {\n  if (MetaData.isServer) {\n    return item;\n  }\n  const key = moduleName + config.NSP + group;\n  if (!loadings[key]) {\n    loadings[key] = new TaskCounter(depthTime);\n    loadings[key].addListener(TaskCountEvent, e => {\n      const store = MetaData.clientStore;\n      if (store) {\n        const actions = MetaData.actionCreatorMap[moduleName][ActionTypes.MLoading];\n        const action = actions({[group]: e.data});\n        store.dispatch(action);\n      }\n    });\n  }\n  loadings[key].addItem(item);\n  return item;\n}\n"],"file":"loading.js"}