{"version":3,"sources":["../../src/index.tsx"],"names":["ConnectedRouter","connectRouter","routerMiddleware","React","createBrowserHistory","createMemoryHistory","renderApp","renderSSR","renderToNodeStream","renderToString","ReactDOM","invalidview","withRouter","routerActions","loadView","exportModule","buildApp","moduleGetter","appModuleName","storeOptions","container","history","reducers","router","Error","state","action","routerData","routerParser","routerInited","middlewares","unshift","filterRouter","next","type","Provider","AppMainView","ssrInitStoreKey","WithRouter","app","render","window","hydrate","document","getElementById","buildSSR","initialEntries","renderToStream"],"mappings":"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","sourcesContent":["import {RootState as BaseRootState, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport {ConnectedRouter, RouterState, connectRouter, routerMiddleware} from 'connected-react-router';\nimport React, {ReactElement} from 'react';\nimport {createBrowserHistory, createMemoryHistory} from 'history';\nimport {renderApp, renderSSR} from '@medux/react';\nimport {renderToNodeStream, renderToString} from 'react-dom/server';\n\nimport ReactDOM from 'react-dom';\nimport {invalidview} from '@medux/core';\nimport {withRouter} from 'react-router-dom';\n\nexport {routerActions} from 'connected-react-router';\nexport {loadView, exportModule} from '@medux/react';\n\nexport type RouterParser<T = any> = (nextRouter: T, prevRouter?: T) => T;\n\nexport function buildApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions & {routerParser?: RouterParser} = {},\n  container: string | Element | ((component: ReactElement<any>) => void) = 'root'\n): Promise<void> {\n  const history = createBrowserHistory();\n  storeOptions.reducers = storeOptions.reducers || {};\n  if (storeOptions.reducers && storeOptions.reducers.router) {\n    throw new Error(\"the reducer name 'router' is not allowed\");\n  }\n  const router = connectRouter(history);\n  storeOptions.reducers.router = (state, action) => {\n    const routerData = router(state, action as any);\n    if (storeOptions.routerParser && state !== routerData) {\n      return storeOptions.routerParser(routerData, state);\n    } else {\n      return routerData;\n    }\n  };\n  // SSR需要数据是单向的，store->view，不能store->view->store->view，而view:ConnectedRouter初始化时会触发一次LOCATION_CHANGE\n  let routerInited = false;\n  const filterRouter = () => (next: Function) => (action: {type: string}) => {\n    if (action.type === '@@router/LOCATION_CHANGE') {\n      if (!routerInited) {\n        routerInited = true;\n        return action;\n      } else {\n        invalidview();\n      }\n    }\n    return next(action);\n  };\n  storeOptions.middlewares = storeOptions.middlewares || [];\n  storeOptions.middlewares.unshift(filterRouter, routerMiddleware(history));\n\n  return renderApp(\n    (Provider, AppMainView, ssrInitStoreKey) => {\n      const WithRouter = withRouter(AppMainView);\n      const app = (\n        <Provider>\n          <ConnectedRouter history={history}>\n            <WithRouter />\n          </ConnectedRouter>\n        </Provider>\n      );\n      if (typeof container === 'function') {\n        container(app);\n      } else {\n        const render = window[ssrInitStoreKey] ? ReactDOM.hydrate : ReactDOM.render;\n        render(app, typeof container === 'string' ? document.getElementById(container) : container);\n      }\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport function buildSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  initialEntries: string[],\n  storeOptions: StoreOptions & {routerParser?: RouterParser} = {},\n  renderToStream: boolean = false\n): Promise<{html: string | ReadableStream; data: any; ssrInitStoreKey: string}> {\n  const history = createMemoryHistory({initialEntries});\n  storeOptions.reducers = storeOptions.reducers || {};\n  if (storeOptions.reducers && storeOptions.reducers.router) {\n    throw new Error(\"the reducer name 'router' is not allowed\");\n  }\n  const router = connectRouter(history);\n  storeOptions.reducers.router = (state, action) => {\n    const routerData = router(state.router, action as any);\n    if (storeOptions.routerParser && state.router !== routerData) {\n      state.router = storeOptions.routerParser(routerData, state.router);\n    } else {\n      state.router = routerData;\n    }\n  };\n  let routerInited = false;\n  const filterRouter = () => (next: Function) => (action: {type: string}) => {\n    if (action.type === '@@router/LOCATION_CHANGE') {\n      if (!routerInited) {\n        routerInited = true;\n        return action;\n      } else {\n        invalidview();\n      }\n    }\n    return next(action);\n  };\n  storeOptions.middlewares = storeOptions.middlewares || [];\n  storeOptions.middlewares.unshift(filterRouter, routerMiddleware(history));\n  const render = renderToStream ? renderToNodeStream : renderToString;\n  return renderSSR(\n    (Provider, AppMainView) => {\n      return render(\n        <Provider>\n          <ConnectedRouter history={history}>\n            <AppMainView />\n          </ConnectedRouter>\n        </Provider>\n      );\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport type RootState<G extends ModuleGetter, R = RouterState> = BaseRootState<G> & {router: R};\n"],"file":"index.js"}