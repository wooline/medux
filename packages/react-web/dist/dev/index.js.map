{"version":3,"sources":["../../src/index.tsx"],"names":["ConnectedRouter","connectRouter","routerMiddleware","React","createBrowserHistory","createMemoryHistory","renderApp","renderSSR","renderToNodeStream","renderToString","ReactDOM","invalidview","withRouter","routerActions","loadView","exportModule","buildApp","moduleGetter","appModuleName","storeOptions","container","history","reducers","router","Error","state","action","routerData","routerParser","routerInited","filterRouter","next","type","middlewares","unshift","Provider","AppMainView","ssrInitStoreKey","WithRouter","app","render","window","hydrate","document","getElementById","buildSSR","initialEntries","renderToStream"],"mappings":"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","sourcesContent":["import {RootState as BaseRootState, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport {ConnectedRouter, RouterState, connectRouter, routerMiddleware} from 'connected-react-router';\nimport React, {ReactElement} from 'react';\nimport {createBrowserHistory, createMemoryHistory} from 'history';\nimport {renderApp, renderSSR} from '@medux/react';\nimport {renderToNodeStream, renderToString} from 'react-dom/server';\n\nimport ReactDOM from 'react-dom';\nimport {invalidview} from '@medux/core';\nimport {withRouter} from 'react-router-dom';\n\nexport {routerActions} from 'connected-react-router';\nexport {loadView, exportModule} from '@medux/react';\n\nexport type RouterParser<T = any> = (nextRouter: T, prevRouter?: T) => T;\n\nexport function buildApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions & {routerParser?: RouterParser} = {},\n  container: string | Element | ((component: ReactElement<any>) => void) = 'root'\n): Promise<void> {\n  const history = createBrowserHistory();\n  storeOptions.reducers = storeOptions.reducers || {};\n  if (storeOptions.reducers && storeOptions.reducers.router) {\n    throw new Error(\"the reducer name 'router' is not allowed\");\n  }\n  const router = connectRouter(history);\n  storeOptions.reducers.router = (state, action) => {\n    const routerData = router(state, action as any);\n    if (storeOptions.routerParser && state !== routerData) {\n      return storeOptions.routerParser(routerData, state);\n    } else {\n      return routerData;\n    }\n  };\n  // SSR需要数据是单向的，store->view，不能store->view->store->view，而view:ConnectedRouter初始化时会触发一次LOCATION_CHANGE\n  let routerInited = false;\n  const filterRouter = () => (next: Function) => (action: {type: string}) => {\n    if (action.type === '@@router/LOCATION_CHANGE') {\n      if (!routerInited) {\n        routerInited = true;\n        return action;\n      } else {\n        invalidview();\n      }\n    }\n    return next(action);\n  };\n  storeOptions.middlewares = storeOptions.middlewares || [];\n  storeOptions.middlewares.unshift(filterRouter, routerMiddleware(history));\n\n  return renderApp(\n    (Provider, AppMainView, ssrInitStoreKey) => {\n      const WithRouter = withRouter(AppMainView);\n      const app = (\n        <Provider>\n          <ConnectedRouter history={history}>\n            <WithRouter />\n          </ConnectedRouter>\n        </Provider>\n      );\n      if (typeof container === 'function') {\n        container(app);\n      } else {\n        const render = window[ssrInitStoreKey] ? ReactDOM.hydrate : ReactDOM.render;\n        render(app, typeof container === 'string' ? document.getElementById(container) : container);\n      }\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport function buildSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  initialEntries: string[],\n  storeOptions: StoreOptions & {routerParser?: RouterParser} = {},\n  renderToStream: boolean = false\n): Promise<{html: string | ReadableStream; data: any; ssrInitStoreKey: string}> {\n  const history = createMemoryHistory({initialEntries});\n  storeOptions.reducers = storeOptions.reducers || {};\n  if (storeOptions.reducers && storeOptions.reducers.router) {\n    throw new Error(\"the reducer name 'router' is not allowed\");\n  }\n  const router = connectRouter(history);\n  storeOptions.reducers.router = (state, action) => {\n    const routerData = router(state.router, action as any);\n    if (storeOptions.routerParser && state.router !== routerData) {\n      state.router = storeOptions.routerParser(routerData, state.router);\n    } else {\n      state.router = routerData;\n    }\n  };\n  let routerInited = false;\n  const filterRouter = () => (next: Function) => (action: {type: string}) => {\n    if (action.type === '@@router/LOCATION_CHANGE') {\n      if (!routerInited) {\n        routerInited = true;\n        return action;\n      } else {\n        invalidview();\n      }\n    }\n    return next(action);\n  };\n  storeOptions.middlewares = storeOptions.middlewares || [];\n  storeOptions.middlewares.unshift(filterRouter, routerMiddleware(history));\n  const render = renderToStream ? renderToNodeStream : renderToString;\n  return renderSSR(\n    (Provider, AppMainView) => {\n      return render(\n        <Provider>\n          <ConnectedRouter history={history}>\n            <AppMainView />\n          </ConnectedRouter>\n        </Provider>\n      );\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport type RootState<G extends ModuleGetter, R = RouterState> = BaseRootState<G> & {router: R};\n"],"file":"index.js"}