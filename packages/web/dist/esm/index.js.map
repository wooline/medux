{"version":3,"sources":["../../src/index.ts"],"names":["createBrowserHistory","createMemoryHistory","createHashHistory","isLocation","data","BrowserHistoryProxy","history","locationToRoute","getLocation","location","subscribe","listener","listen","locationToRouteData","state","equal","a","b","pathname","search","hash","patch","routeData","push","BrowserHistoryActions","routeToLocation","replace","go","n","goBack","goForward","createHistory","transformRoute","historyProxy","historyActions"],"mappings":"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","sourcesContent":["import {HistoryProxy, RouteData} from '@medux/core/types/export';\n\nimport {History} from 'history';\n\nexport {createBrowserHistory, createMemoryHistory, createHashHistory} from 'history';\n\ninterface BrowserLocation {\n  pathname: string;\n  search: string;\n  hash: string;\n  state: RouteData;\n}\n\nexport interface Location {\n  pathname: string;\n  search: string;\n  hash: string;\n}\n\nexport type RouteToLocation = (routeData: RouteData) => Location;\nexport type LocationToRoute = (location: Location) => RouteData;\n\nexport interface TransformRoute {\n  locationToRoute: LocationToRoute;\n  routeToLocation: RouteToLocation;\n}\n\nfunction isLocation(data: RouteData | Location): data is Location {\n  return !!data['pathname'];\n}\n\nexport interface HistoryActions<P = RouteData> {\n  push(data: P | Location | string): void;\n  replace(data: P | Location | string): void;\n  go(n: number): void;\n  goBack(): void;\n  goForward(): void;\n}\nclass BrowserHistoryProxy implements HistoryProxy<BrowserLocation> {\n  public initialized = true;\n  public constructor(protected history: History, protected locationToRoute: LocationToRoute) {}\n  public getLocation() {\n    return this.history.location;\n  }\n  public subscribe(listener: (location: BrowserLocation) => void) {\n    this.history.listen(listener);\n  }\n  public locationToRouteData(location: BrowserLocation) {\n    return location.state || this.locationToRoute(location);\n  }\n  public equal(a: BrowserLocation, b: BrowserLocation) {\n    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;\n  }\n  public patch(location: BrowserLocation, routeData: RouteData): void {\n    this.history.push({...location, state: routeData});\n  }\n}\n\nclass BrowserHistoryActions implements HistoryActions {\n  public constructor(protected history: History, protected routeToLocation: RouteToLocation) {}\n  public push(data: RouteData | Location | string): void {\n    if (typeof data === 'string') {\n      this.history.push(data);\n    } else if (isLocation(data)) {\n      this.history.push(data);\n    } else {\n      const location = this.routeToLocation(data as RouteData);\n      this.history.push({...location, state: data});\n    }\n  }\n  public replace(data: RouteData | Location | string): void {\n    if (typeof data === 'string') {\n      this.history.replace(data);\n    } else if (isLocation(data)) {\n      this.history.replace(data);\n    } else {\n      const location = this.routeToLocation(data as RouteData);\n      this.history.replace({...location, state: data});\n    }\n  }\n  public go(n: number) {\n    this.history.go(n);\n  }\n  public goBack() {\n    this.history.goBack();\n  }\n  public goForward() {\n    this.history.goForward();\n  }\n}\n\nexport function createHistory(history: History, transformRoute: TransformRoute) {\n  const historyProxy: HistoryProxy<BrowserLocation> = new BrowserHistoryProxy(history, transformRoute.locationToRoute);\n  const historyActions: HistoryActions = new BrowserHistoryActions(history, transformRoute.routeToLocation);\n  return {\n    historyProxy,\n    historyActions,\n  };\n}\n"],"file":"index.js"}