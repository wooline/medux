{"version":3,"sources":["../../src/index.ts"],"names":["createBrowserHistory","createMemoryHistory","isServer","isLocation","data","BrowserHistoryProxy","history","locationToRoute","getLocation","location","subscribe","listener","listen","locationToRouteData","state","isTimeTravel","storeLocation","pathnameInStore","pathname","searchInStore","search","hashInStore","hash","patch","routeData","push","BrowserHistoryActions","routeToLocation","replace","go","n","goBack","goForward","createHistory","options","historyProxy","historyActions"],"mappings":"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","sourcesContent":["import {BrowserHistoryBuildOptions, History, MemoryHistoryBuildOptions, createBrowserHistory, createMemoryHistory} from 'history';\nimport {HistoryProxy, RouteData} from '@medux/core/types/export';\n\nimport {isServer} from '@medux/core';\n\ninterface Location {\n  pathname: string;\n  search: string;\n  hash: string;\n  state: RouteData;\n  key?: string;\n}\n\nexport interface BrowserLocation {\n  pathname: string;\n  search: string;\n  hash: string;\n  key?: string;\n}\n\nexport interface BrowserHistoryOptions extends BrowserHistoryBuildOptions {\n  locationToRoute: (location: BrowserLocation) => RouteData;\n  routeToLocation: (data: RouteData) => BrowserLocation;\n}\nexport interface MemoryHistoryOptions extends MemoryHistoryBuildOptions {\n  locationToRoute: (location: BrowserLocation) => RouteData;\n  routeToLocation: (data: RouteData) => BrowserLocation;\n}\nfunction isLocation(data: RouteData | BrowserLocation): data is Location {\n  return !data['views'];\n}\n\nexport interface HistoryActions {\n  push(data: RouteData | BrowserLocation | string): void;\n  replace(data: RouteData | BrowserLocation | string): void;\n  go(n: number): void;\n  goBack(): void;\n  goForward(): void;\n}\nclass BrowserHistoryProxy implements HistoryProxy<Location> {\n  public constructor(protected history: History, protected locationToRoute: (location: BrowserLocation) => RouteData) {}\n  public getLocation() {\n    return this.history.location;\n  }\n  public subscribe(listener: (location: Location) => void) {\n    this.history.listen(listener);\n  }\n  public locationToRouteData(location: Location) {\n    return location.state || this.locationToRoute(location);\n  }\n  public isTimeTravel(storeLocation: Location) {\n    const {pathname: pathnameInStore, search: searchInStore, hash: hashInStore} = storeLocation;\n    const {pathname, search, hash} = this.history.location;\n    return pathname !== pathnameInStore || search !== searchInStore || hash !== hashInStore;\n  }\n  public patch(location: Location, routeData: RouteData): void {\n    this.history.push({...location, state: routeData});\n  }\n}\n\nclass BrowserHistoryActions implements HistoryActions {\n  public constructor(protected history: History, protected routeToLocation: (data: RouteData) => BrowserLocation) {}\n  public push(data: RouteData | BrowserLocation | string): void {\n    if (typeof data === 'string') {\n      this.history.push(data);\n    } else if (isLocation(data)) {\n      this.history.push(data);\n    } else {\n      const location = this.routeToLocation(data as RouteData);\n      this.history.push({...location, state: data});\n    }\n  }\n  public replace(data: RouteData | BrowserLocation | string): void {\n    if (typeof data === 'string') {\n      this.history.replace(data);\n    } else if (isLocation(data)) {\n      this.history.push(data);\n    } else {\n      const location = this.routeToLocation(data as RouteData);\n      this.history.replace({...location, state: data});\n    }\n  }\n  public go(n: number) {\n    this.history.go(n);\n  }\n  public goBack() {\n    this.history.goBack();\n  }\n  public goForward() {\n    this.history.goForward();\n  }\n}\n\nexport function createHistory(options: BrowserHistoryOptions | MemoryHistoryOptions) {\n  const history = isServer() ? createMemoryHistory(options) : createBrowserHistory(options);\n  const historyProxy: HistoryProxy<Location> = new BrowserHistoryProxy(history, options.locationToRoute);\n  const historyActions: HistoryActions = new BrowserHistoryActions(history, options.routeToLocation);\n  return {\n    history,\n    historyProxy,\n    historyActions,\n  };\n}\n"],"file":"index.js"}