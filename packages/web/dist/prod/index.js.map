{"version":3,"sources":["../../src/index.ts"],"names":["createBrowserHistory","createMemoryHistory","isServer","isLocation","data","BrowserHistoryProxy","history","locationToRoute","getLocation","location","subscribe","listener","listen","locationToRouteData","state","equal","a","b","pathname","search","hash","patch","routeData","push","BrowserHistoryActions","routeToLocation","views","paths","reduce","prev","cur","split","moduleName","viewName","replace","go","n","goBack","goForward","createHistory","options","historyProxy","historyActions"],"mappings":"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","sourcesContent":["import {BrowserHistoryBuildOptions, History, MemoryHistoryBuildOptions, createBrowserHistory, createMemoryHistory} from 'history';\nimport {DisplayViews, HistoryProxy, RouteData} from '@medux/core/types/export';\n\nimport {isServer} from '@medux/core';\n\ninterface Location {\n  pathname: string;\n  search: string;\n  hash: string;\n  state: RouteData;\n}\n\nexport interface BrowserLocation {\n  pathname: string;\n  search: string;\n  hash: string;\n}\n\nexport interface RoutePayload {\n  params: {[moduleName: string]: {[key: string]: any}};\n  paths: string[];\n}\nexport type RouteToLocation = (routeData: RoutePayload) => BrowserLocation;\nexport type LocationToRoute = (location: BrowserLocation) => RouteData;\n\nexport interface TransformRoute {\n  locationToRoute: LocationToRoute;\n  routeToLocation: RouteToLocation;\n}\n\nexport type BrowserHistoryOptions = BrowserHistoryBuildOptions & TransformRoute;\nexport type MemoryHistoryOptions = MemoryHistoryBuildOptions & TransformRoute;\nfunction isLocation(data: RoutePayload | BrowserLocation): data is Location {\n  return !data['params'] && !data['paths'];\n}\n\nexport interface HistoryActions {\n  push(data: RoutePayload | BrowserLocation | string): void;\n  replace(data: RoutePayload | BrowserLocation | string): void;\n  go(n: number): void;\n  goBack(): void;\n  goForward(): void;\n}\nclass BrowserHistoryProxy implements HistoryProxy<Location> {\n  public constructor(protected history: History, protected locationToRoute: LocationToRoute) {}\n  public getLocation() {\n    return this.history.location;\n  }\n  public subscribe(listener: (location: Location) => void) {\n    this.history.listen(listener);\n  }\n  public locationToRouteData(location: Location) {\n    return location.state || this.locationToRoute(location);\n  }\n  public equal(a: Location, b: Location) {\n    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;\n  }\n  public patch(location: Location, routeData: RouteData): void {\n    this.history.push({...location, state: routeData});\n  }\n}\n\nclass BrowserHistoryActions implements HistoryActions {\n  public constructor(protected history: History, protected routeToLocation: RouteToLocation) {}\n  public push(data: RoutePayload | BrowserLocation | string): void {\n    if (typeof data === 'string') {\n      this.history.push(data);\n    } else if (isLocation(data)) {\n      this.history.push(data);\n    } else {\n      const routeData = data as RoutePayload;\n      const location = this.routeToLocation(routeData);\n      const views: DisplayViews = routeData.paths.reduce((prev: DisplayViews, cur) => {\n        const [moduleName, viewName] = cur.split('.');\n        if (viewName) {\n          if (!prev[moduleName]) {\n            prev[moduleName] = {};\n          }\n          prev[moduleName][viewName] = true;\n        }\n        return prev;\n      }, {});\n      this.history.push({...location, state: {...routeData, views}});\n    }\n  }\n  public replace(data: RoutePayload | BrowserLocation | string): void {\n    if (typeof data === 'string') {\n      this.history.replace(data);\n    } else if (isLocation(data)) {\n      this.history.push(data);\n    } else {\n      const location = this.routeToLocation(data as RoutePayload);\n      this.history.replace({...location, state: data});\n    }\n  }\n  public go(n: number) {\n    this.history.go(n);\n  }\n  public goBack() {\n    this.history.goBack();\n  }\n  public goForward() {\n    this.history.goForward();\n  }\n}\n\nexport function createHistory(options: BrowserHistoryOptions | MemoryHistoryOptions) {\n  const history = isServer() ? createMemoryHistory(options) : createBrowserHistory(options);\n  const historyProxy: HistoryProxy<Location> = new BrowserHistoryProxy(history, options.locationToRoute);\n  const historyActions: HistoryActions = new BrowserHistoryActions(history, options.routeToLocation);\n  return {\n    history,\n    historyProxy,\n    historyActions,\n  };\n}\n"],"file":"index.js"}