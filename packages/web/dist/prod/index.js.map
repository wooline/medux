{"version":3,"sources":["../../src/index.ts"],"names":["createBrowserHistory","createMemoryHistory","isServer","isLocation","data","BrowserHistoryProxy","history","locationToRoute","getLocation","location","subscribe","listener","listen","locationToRouteData","state","equal","a","b","pathname","search","hash","patch","routeData","push","BrowserHistoryActions","routeToLocation","replace","go","n","goBack","goForward","createHistory","options","historyProxy","historyActions"],"mappings":"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","sourcesContent":["import {BrowserHistoryBuildOptions, History, MemoryHistoryBuildOptions, createBrowserHistory, createMemoryHistory} from 'history';\nimport {HistoryProxy, RouteData} from '@medux/core/types/export';\n\nimport {isServer} from '@medux/core';\n\ninterface Location {\n  pathname: string;\n  search: string;\n  hash: string;\n  state: RouteData;\n}\n\nexport interface BrowserLocation {\n  pathname: string;\n  search: string;\n  hash: string;\n}\n\nexport type RouteToLocation = (routeData: RouteData) => BrowserLocation;\nexport type LocationToRoute = (location: BrowserLocation) => RouteData;\n\nexport interface TransformRoute {\n  locationToRoute: LocationToRoute;\n  routeToLocation: RouteToLocation;\n}\n\nexport type BrowserHistoryOptions = BrowserHistoryBuildOptions & TransformRoute;\nexport type MemoryHistoryOptions = MemoryHistoryBuildOptions & TransformRoute;\nfunction isLocation(data: RouteData | BrowserLocation): data is Location {\n  return !!data['pathname'];\n}\n\nexport interface HistoryActions<P = RouteData> {\n  push(data: P | BrowserLocation | string): void;\n  replace(data: P | BrowserLocation | string): void;\n  go(n: number): void;\n  goBack(): void;\n  goForward(): void;\n}\nclass BrowserHistoryProxy implements HistoryProxy<Location> {\n  public constructor(protected history: History, protected locationToRoute: LocationToRoute) {}\n  public getLocation() {\n    return this.history.location;\n  }\n  public subscribe(listener: (location: Location) => void) {\n    this.history.listen(listener);\n  }\n  public locationToRouteData(location: Location) {\n    return location.state || this.locationToRoute(location);\n  }\n  public equal(a: Location, b: Location) {\n    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;\n  }\n  public patch(location: Location, routeData: RouteData): void {\n    this.history.push({...location, state: routeData});\n  }\n}\n\nclass BrowserHistoryActions implements HistoryActions {\n  public constructor(protected history: History, protected routeToLocation: RouteToLocation) {}\n  public push(data: RouteData | BrowserLocation | string): void {\n    if (typeof data === 'string') {\n      this.history.push(data);\n    } else if (isLocation(data)) {\n      this.history.push(data);\n    } else {\n      const location = this.routeToLocation(data as RouteData);\n      this.history.push({...location, state: data});\n    }\n  }\n  public replace(data: RouteData | BrowserLocation | string): void {\n    if (typeof data === 'string') {\n      this.history.replace(data);\n    } else if (isLocation(data)) {\n      this.history.replace(data);\n    } else {\n      const location = this.routeToLocation(data as RouteData);\n      this.history.replace({...location, state: data});\n    }\n  }\n  public go(n: number) {\n    this.history.go(n);\n  }\n  public goBack() {\n    this.history.goBack();\n  }\n  public goForward() {\n    this.history.goForward();\n  }\n}\n\nexport function createHistory(options: BrowserHistoryOptions | MemoryHistoryOptions) {\n  const history = isServer() ? createMemoryHistory(options) : createBrowserHistory(options);\n  const historyProxy: HistoryProxy<Location> = new BrowserHistoryProxy(history, options.locationToRoute);\n  const historyActions: HistoryActions = new BrowserHistoryActions(history, options.routeToLocation);\n  return {\n    history,\n    historyProxy,\n    historyActions,\n  };\n}\n"],"file":"index.js"}