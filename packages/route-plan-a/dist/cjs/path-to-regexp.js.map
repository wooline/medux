{"version":3,"sources":["../../src/path-to-regexp.ts"],"names":["lexer","str","tokens","i","length","char","push","type","index","value","name","j","code","charCodeAt","TypeError","count","pattern","parse","options","prefixes","defaultPattern","escapeString","delimiter","result","key","path","tryConsume","undefined","mustConsume","nextType","consumeText","prefix","indexOf","suffix","modifier","open","compile","tokensToFunction","reFlags","flags","encode","x","validate","matches","map","token","RegExp","data","optional","repeat","Array","isArray","segment","test","String","typeOfMessage","match","keys","re","pathToRegexp","regexpToFunction","decode","pathname","m","exec","params","Object","create","split","replace","sensitive","regexpToRegexp","groups","source","arrayToRegexp","paths","parts","join","stringToRegexp","tokensToRegexp","strict","start","end","endsWith","route","mod","endToken","isEndDelimited"],"mappings":"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","sourcesContent":["// fork from path-to-regexp 6.1.0\n// https://github.com/pillarjs/path-to-regexp\n\n/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type: 'OPEN' | 'CLOSE' | 'PATTERN' | 'NAME' | 'CHAR' | 'ESCAPED_CHAR' | 'MODIFIER' | 'END';\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === '*' || char === '+' || char === '?') {\n      tokens.push({type: 'MODIFIER', index: i, value: str[i++]});\n      continue;\n    }\n\n    if (char === '\\\\') {\n      tokens.push({type: 'ESCAPED_CHAR', index: i++, value: str[i++]});\n      continue;\n    }\n\n    if (char === '{') {\n      tokens.push({type: 'OPEN', index: i, value: str[i++]});\n      continue;\n    }\n\n    if (char === '}') {\n      tokens.push({type: 'CLOSE', index: i, value: str[i++]});\n      continue;\n    }\n\n    if (char === ':') {\n      let name = '';\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95 ||\n          // `.`\n          code === 46\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({type: 'NAME', index: i, value: name});\n      i = j;\n      continue;\n    }\n\n    if (char === '(') {\n      let count = 1;\n      let pattern = '';\n      let j = i + 1;\n\n      if (str[j] === '?') {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === '\\\\') {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === ')') {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === '(') {\n          count++;\n          if (str[j + 1] !== '?') {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({type: 'PATTERN', index: i, value: pattern});\n      i = j;\n      continue;\n    }\n\n    tokens.push({type: 'CHAR', index: i, value: str[i++]});\n  }\n\n  tokens.push({type: 'END', index: i, value: ''});\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const {prefixes = './'} = options;\n  const defaultPattern = `[^${escapeString(options.delimiter || '/#?')}]+?`;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = '';\n\n  const tryConsume = (type: LexToken['type']): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n    return undefined;\n  };\n\n  const mustConsume = (type: LexToken['type']): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const {type: nextType, index} = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = '';\n    let value: string | undefined;\n    // tslint:disable-next-line\n    while ((value = tryConsume('CHAR') || tryConsume('ESCAPED_CHAR'))) {\n      result += value;\n    }\n    return result;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume('CHAR');\n    const name = tryConsume('NAME');\n    const pattern = tryConsume('PATTERN');\n\n    if (name || pattern) {\n      let prefix = char || '';\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = '';\n      }\n\n      if (path) {\n        result.push(path);\n        path = '';\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: '',\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume('MODIFIER') || '',\n      });\n      continue;\n    }\n\n    const value = char || tryConsume('ESCAPED_CHAR');\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = '';\n    }\n\n    const open = tryConsume('OPEN');\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume('NAME') || '';\n      const pattern = tryConsume('PATTERN') || '';\n      const suffix = consumeText();\n\n      mustConsume('CLOSE');\n\n      result.push({\n        name: name || (pattern ? key++ : ''),\n        pattern: name && !pattern ? defaultPattern : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume('MODIFIER') || '',\n      });\n      continue;\n    }\n\n    mustConsume('END');\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(str: string, options?: ParseOptions & TokensToFunctionOptions) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(tokens: Token[], options: TokensToFunctionOptions = {}): PathFunction<P> {\n  const reFlags = flags(options);\n  const {encode = (x: string) => x, validate = true} = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map(token => {\n    if (typeof token === 'object') {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n    return undefined;\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === '?' || token.modifier === '*';\n      const repeat = token.modifier === '*' || token.modifier === '+';\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(`Expected \"${token.name}\" to not repeat, but got an array`);\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(`Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`);\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === 'string' || typeof value === 'number') {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(`Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`);\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? 'an array' : 'a string';\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (path: string) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(str: Path, options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(re: RegExp, keys: Key[], options: RegexpToFunctionOptions = {}): MatchFunction<P> {\n  const {decode = (x: string) => x} = options;\n\n  return function(pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const {0: path, index} = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      // tslint:disable-next-line\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === '*' || key.modifier === '+') {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map(value => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return {path, index, params};\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: {sensitive?: boolean}) {\n  return options && options.sensitive ? '' : 'i';\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  // Use a negative lookahead to match only capturing groups.\n  const groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (let i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: '',\n        suffix: '',\n        modifier: '',\n        pattern: '',\n      });\n    }\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(paths: Array<string | RegExp>, keys?: Key[], options?: TokensToRegexpOptions & ParseOptions): RegExp {\n  const parts = paths.map(path => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join('|')})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(path: string, keys?: Key[], options?: TokensToRegexpOptions & ParseOptions) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp allows an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(tokens: Token[], keys?: Key[], options: TokensToRegexpOptions = {}) {\n  const {strict = false, start = true, end = true, encode = (x: string) => x} = options;\n  const endsWith = `[${escapeString(options.endsWith || '')}]|$`;\n  const delimiter = `[${escapeString(options.delimiter || '/#?')}]`;\n  let route = start ? '^' : '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === 'string') {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === '+' || token.modifier === '*') {\n            const mod = token.modifier === '*' ? '?' : '';\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiter}?`;\n\n    route += !options.endsWith ? '$' : `(?=${endsWith})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === 'string'\n        ? delimiter.indexOf(endToken[endToken.length - 1]) > -1\n        : // tslint:disable-next-line\n          endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiter}(?=${endsWith}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiter}|${endsWith})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(path: Path, keys?: Key[], options?: TokensToRegexpOptions & ParseOptions) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n"],"file":"path-to-regexp.js"}