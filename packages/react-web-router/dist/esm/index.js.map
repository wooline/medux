{"version":3,"sources":["../../src/index.tsx"],"names":["createLocation","buildToBrowserUrl","buildTransformRoute","getBrowserRouteActions","React","Router","StaticRouter","withRouter","renderApp","renderSSR","renderToNodeStream","renderToString","ReactDOM","createHistory","loadView","exportModule","ActionTypes","delayPromise","LoadingState","exportActions","BaseModelHandlers","effect","errorAction","reducer","setRouteConfig","historyActions","undefined","transformRoute","getBrowserHistory","toUrl","buildApp","moduleGetter","appModuleName","history","routeConfig","storeOptions","container","historyData","historyProxy","Provider","AppMainView","ssrInitStoreKey","WithRouter","app","render","window","hydrate","document","getElementById","buildSSR","location","renderToStream","listen"],"mappings":"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","sourcesContent":["import {RootState as BaseRootState, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport {History, createLocation} from 'history';\nimport {Location, TransformRoute, buildToBrowserUrl, buildTransformRoute, getBrowserRouteActions} from '@medux/route-plan-a';\nimport React, {ReactElement} from 'react';\nimport {Router, StaticRouter, withRouter} from 'react-router-dom';\nimport {renderApp, renderSSR} from '@medux/react';\nimport {renderToNodeStream, renderToString} from 'react-dom/server';\n\nimport ReactDOM from 'react-dom';\nimport {createHistory} from '@medux/web';\n\nexport {loadView, exportModule} from '@medux/react';\nexport {ActionTypes, delayPromise, LoadingState, exportActions, BaseModelHandlers, effect, errorAction, reducer} from '@medux/core';\nexport {setRouteConfig} from '@medux/route-plan-a';\n\nexport type RouteData = import('@medux/core/types/export').RouteData;\nexport type LoadView<MG extends ModuleGetter> = import('@medux/react').LoadView<MG>;\nexport type BaseModelState<R = {[key: string]: any}> = import('@medux/core/types/export').BaseModelState<R>;\nexport type BrowserRoutePayload<P> = import('@medux/route-plan-a').BrowserRoutePayload<P>;\nexport type RouteConfig = import('@medux/route-plan-a').RouteConfig;\nexport type ToBrowserUrl<Params> = import('@medux/route-plan-a').ToBrowserUrl<Params>;\nexport type BrowserHistoryActions<Params> = import('@medux/route-plan-a').BrowserHistoryActions<BrowserRoutePayload<Params>>;\n\nlet historyActions: BrowserHistoryActions<RouteData> | undefined = undefined;\nlet transformRoute: TransformRoute | undefined = undefined;\n\nexport function getBrowserHistory<Params>(): {historyActions: BrowserHistoryActions<Params>; toUrl: ToBrowserUrl<Params>} {\n  return {historyActions: getBrowserRouteActions<Params>(() => historyActions!), toUrl: buildToBrowserUrl(() => transformRoute!)};\n}\n\nexport function buildApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  history: History,\n  routeConfig: RouteConfig,\n  storeOptions: StoreOptions = {},\n  container: string | Element | ((component: ReactElement<any>) => void) = 'root'\n) {\n  if (!transformRoute) {\n    transformRoute = buildTransformRoute(routeConfig);\n  }\n  const historyData = createHistory(history, transformRoute);\n  const {historyProxy} = historyData;\n  historyActions = historyData.historyActions;\n\n  return renderApp(\n    (Provider, AppMainView, ssrInitStoreKey) => {\n      const WithRouter = withRouter(AppMainView);\n      const app = (\n        <Provider>\n          <Router history={history}>\n            <WithRouter />\n          </Router>\n        </Provider>\n      );\n      if (typeof container === 'function') {\n        container(app);\n      } else {\n        const render = window[ssrInitStoreKey] ? ReactDOM.hydrate : ReactDOM.render;\n        render(app, typeof container === 'string' ? document.getElementById(container) : container);\n      }\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport function buildSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  location: string,\n  routeConfig: RouteConfig,\n  storeOptions: StoreOptions = {},\n  renderToStream: boolean = false\n): Promise<{html: string | ReadableStream; data: any; ssrInitStoreKey: string}> {\n  if (!transformRoute) {\n    transformRoute = buildTransformRoute(routeConfig);\n  }\n  const historyData = createHistory({listen: () => void 0, location: createLocation(location)} as any, transformRoute);\n  const {historyProxy} = historyData;\n  historyActions = historyData.historyActions;\n\n  const render = renderToStream ? renderToNodeStream : renderToString;\n  return renderSSR(\n    (Provider, AppMainView) => {\n      return render(\n        <Provider>\n          <StaticRouter location={location}>\n            <AppMainView />\n          </StaticRouter>\n        </Provider>\n      );\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport type RootState<G extends ModuleGetter> = BaseRootState<G, Location>;\n"],"file":"index.js"}