{"version":3,"file":"index.min.js","sources":["../../src/index.tsx"],"sourcesContent":["/// <reference path=\"../env/global.d.ts\" />\nimport React from 'react';\nimport {unmountComponentAtNode, hydrate, render} from 'react-dom';\nimport {routeMiddleware, routeReducer, setRouteConfig} from '@medux/route-plan-a';\nimport {env, renderApp, renderSSR, mergeState, setConfig as setCoreConfig, exportModule as baseExportModule} from '@medux/core';\nimport {createRouter} from '@medux/web';\nimport type {ComponentType} from 'react';\nimport type {ModuleGetter, StoreOptions, ExportModule} from '@medux/core';\nimport type {LocationTransform} from '@medux/web';\nimport {appExports} from './sington';\n\nimport type {ServerRequest, ServerResponse} from './sington';\n\nexport {\n  ActionTypes,\n  delayPromise,\n  LoadingState,\n  modelHotReplacement,\n  effect,\n  errorAction,\n  reducer,\n  viewHotReplacement,\n  setLoading,\n  logger,\n  setLoadingDepthTime,\n  isServer,\n  serverSide,\n  deepMerge,\n  deepMergeState,\n} from '@medux/core';\nexport {RouteModuleHandlers as BaseModuleHandlers, createWebLocationTransform} from '@medux/route-plan-a';\nexport {exportApp, patchActions} from './sington';\nexport {DocumentHead} from './components/DocumentHead';\nexport {Else} from './components/Else';\nexport {Switch} from './components/Switch';\nexport {Link} from './components/Link';\nexport type {RootModuleFacade, Dispatch} from '@medux/core';\nexport type {Store} from 'redux';\nexport type {RouteModuleState as BaseModuleState, LocationMap, HistoryAction, Location, PathnameRules} from '@medux/route-plan-a';\nexport type {RootState, RouteState, LocationTransform} from '@medux/web';\nexport type {LoadView} from './loadView';\nexport type {FacadeExports, ServerRequest, ServerResponse} from './sington';\n\nexport function setConfig(conf: {connect?: Function; RSP?: string; historyMax?: number; homeUri?: string; NSP?: string; MSP?: string; SSRKey?: string; MutableData?: boolean; DEVTOOLS?: boolean}) {\n  setCoreConfig(conf);\n  setRouteConfig(conf);\n}\n\nexport const exportModule: ExportModule<ComponentType<any>> = baseExportModule;\n\nexport function buildApp(\n  moduleGetter: ModuleGetter,\n  {\n    appModuleName = 'app',\n    appViewName = 'main',\n    historyType = 'Browser',\n    locationTransform,\n    storeOptions = {},\n    container = 'root',\n  }: {\n    appModuleName?: string;\n    appViewName?: string;\n    historyType?: 'Browser' | 'Hash' | 'Memory';\n    locationTransform: LocationTransform<any>;\n    storeOptions?: StoreOptions;\n    container?: string | Element;\n  }\n) {\n  appExports.history = createRouter(historyType, locationTransform);\n  if (!storeOptions.middlewares) {\n    storeOptions.middlewares = [];\n  }\n  storeOptions.middlewares.unshift(routeMiddleware);\n  if (!storeOptions.reducers) {\n    storeOptions.reducers = {};\n  }\n  storeOptions.reducers.route = routeReducer;\n  if (!storeOptions.initData) {\n    storeOptions.initData = {};\n  }\n  storeOptions.initData = mergeState(storeOptions.initData, {route: appExports.history.getRouteState()});\n\n  return renderApp<ComponentType<any>>(\n    (store, appModel, AppView, ssrInitStoreKey) => {\n      const reRender = (View: ComponentType<any>) => {\n        const panel: any = typeof container === 'string' ? env.document.getElementById(container) : container;\n        unmountComponentAtNode(panel!);\n        const renderFun = env[ssrInitStoreKey] ? hydrate : render;\n        renderFun(<View store={store} />, panel);\n      };\n      reRender(AppView);\n      return reRender;\n    },\n    moduleGetter,\n    appModuleName,\n    appViewName,\n    storeOptions,\n    (store) => {\n      appExports.store = store as any;\n      appExports.history.setStore(store);\n      const routeState = appExports.history.getRouteState();\n      return Object.keys(routeState.params);\n    }\n  );\n}\n\nlet SSRTPL: string;\n\nexport function setSsrHtmlTpl(tpl: string) {\n  SSRTPL = tpl;\n}\n\nexport function buildSSR(\n  moduleGetter: ModuleGetter,\n  {\n    request,\n    response,\n    appModuleName = 'app',\n    appViewName = 'main',\n    locationTransform,\n    storeOptions = {},\n    container = 'root',\n  }: {\n    appModuleName?: string;\n    appViewName?: string;\n    request: ServerRequest;\n    response: ServerResponse;\n    locationTransform: LocationTransform<any>;\n    storeOptions?: StoreOptions;\n    container?: string;\n  }\n): Promise<string> {\n  if (!SSRTPL) {\n    // @ts-ignore\n    SSRTPL = Buffer.from('process.env.MEDUX_ENV_SSRTPL', 'base64').toString();\n  }\n  appExports.request = request;\n  appExports.response = response;\n  appExports.history = createRouter(request.url, locationTransform);\n  if (!storeOptions.initData) {\n    storeOptions.initData = {};\n  }\n  storeOptions.initData = mergeState(storeOptions.initData, {route: appExports.history.getRouteState()});\n  return renderSSR<ComponentType<any>>(\n    (store, appModel, AppView, ssrInitStoreKey) => {\n      const data = store.getState();\n      return {\n        store,\n        ssrInitStoreKey,\n        data,\n        // @ts-ignore\n        html: require('react-dom/server').renderToString(<AppView store={store} />),\n      };\n    },\n    moduleGetter,\n    appModuleName,\n    appViewName,\n    storeOptions,\n    (store) => {\n      appExports.store = store as any;\n      Object.defineProperty(appExports, 'state', {\n        get: () => {\n          return store.getState();\n        },\n      });\n      appExports.history.setStore(store);\n      const routeState = appExports.history.getRouteState();\n      return Object.keys(routeState.params);\n    }\n  ).then(({html, data, ssrInitStoreKey}) => {\n    const match = SSRTPL.match(new RegExp(`<[^<>]+id=['\"]${container}['\"][^<>]*>`, 'm'));\n    if (match) {\n      const pageHead = html.split(/<head>|<\\/head>/, 3);\n      html = pageHead[0] + pageHead[2];\n      return SSRTPL.replace('</head>', `${pageHead[1]}\\r\\n<script>window.${ssrInitStoreKey} = ${JSON.stringify(data)};</script>\\r\\n</head>`).replace(match[0], match[0] + html);\n    }\n    return html;\n  });\n}\n"],"names":["conf","moduleGetter","appModuleName","appViewName","historyType","locationTransform","storeOptions","container","history","middlewares","unshift","routeMiddleware","reducers","route","routeReducer","initData","appExports","getRouteState","store","appModel","AppView","ssrInitStoreKey","reRender","View","panel","env","document","getElementById","hydrate","render","_react","setStore","routeState","Object","keys","params","tpl","SSRTPL","request","response","Buffer","from","toString","url","data","getState","html","require","renderToString","defineProperty","get","then","match","RegExp","pageHead","split","replace","JSON","stringify","exportModule","baseExportModule"],"mappings":"sGA2CO,SAAmBA,mBACVA,wBACCA,qBAKV,SACLC,aAEEC,cAAAA,aAAgB,YAChBC,YAAAA,aAAc,aACdC,YAAAA,aAAc,YACdC,IAAAA,sBACAC,aAAAA,aAAe,SACfC,UAAAA,aAAY,sBAUHC,SAAU,kBAAaJ,EAAaC,GAC1CC,EAAaG,cAChBH,EAAaG,YAAc,IAE7BH,EAAaG,YAAYC,QAAQC,mBAC5BL,EAAaM,WAChBN,EAAaM,SAAW,IAE1BN,EAAaM,SAASC,MAAQC,eACzBR,EAAaS,WAChBT,EAAaS,SAAW,WAE1BT,EAAaS,UAAW,gBAAWT,EAAaS,SAAU,CAACF,MAAOG,aAAWR,QAAQS,mBAE9E,gBACL,SAACC,EAAOC,EAAUC,EAASC,OACnBC,EAAW,SAACC,OACVC,EAAkC,iBAAdjB,EAAyBkB,MAAIC,SAASC,eAAepB,GAAaA,+BACrEiB,IACLC,MAAIJ,GAAmBO,UAAUC,UACzCC,wBAACP,GAAKL,MAAOA,IAAWM,WAEpCF,EAASF,GACFE,IAETrB,EACAC,EACAC,EACAG,GACA,SAACY,gBACYA,MAAQA,eACRV,QAAQuB,SAASb,OACtBc,EAAahB,aAAWR,QAAQS,uBAC/BgB,OAAOC,KAAKF,EAAWG,kCAO7B,SAAuBC,GAC5BC,EAASD,oBAGJ,SACLnC,SAEEqC,IAAAA,QACAC,IAAAA,aACArC,cAAAA,aAAgB,YAChBC,YAAAA,aAAc,SACdE,IAAAA,sBACAC,aAAAA,aAAe,SACfC,UAAAA,aAAY,SAWT8B,IAEHA,EAASG,OAAOC,KAAK,+BAAgC,UAAUC,yBAEtDJ,QAAUA,eACVC,SAAWA,eACX/B,SAAU,kBAAa8B,EAAQK,IAAKtC,GAC1CC,EAAaS,WAChBT,EAAaS,SAAW,WAE1BT,EAAaS,UAAW,gBAAWT,EAAaS,SAAU,CAACF,MAAOG,aAAWR,QAAQS,mBAC9E,gBACL,SAACC,EAAOC,EAAUC,EAASC,OACnBuB,EAAO1B,EAAM2B,iBACZ,CACL3B,MAAAA,EACAG,gBAAAA,EACAuB,KAAAA,EAEAE,KAAMC,QAAQ,oBAAoBC,eAAelB,wBAACV,GAAQF,MAAOA,QAGrEjB,EACAC,EACAC,EACAG,GACA,SAACY,gBACYA,MAAQA,EACnBe,OAAOgB,eAAejC,aAAY,QAAS,CACzCkC,IAAK,kBACIhC,EAAM2B,2BAGNrC,QAAQuB,SAASb,OACtBc,EAAahB,aAAWR,QAAQS,uBAC/BgB,OAAOC,KAAKF,EAAWG,WAEhCgB,MAAK,gBAAEL,IAAAA,KAAMF,IAAAA,KAAMvB,IAAAA,gBACb+B,EAAQf,EAAOe,MAAM,IAAIC,yBAAwB9C,iBAAwB,SAC3E6C,EAAO,KACHE,EAAWR,EAAKS,MAAM,kBAAmB,UAC/CT,EAAOQ,EAAS,GAAKA,EAAS,GACvBjB,EAAOmB,QAAQ,UAAcF,EAAS,yBAAwBjC,QAAqBoC,KAAKC,UAAUd,6BAA8BY,QAAQJ,EAAM,GAAIA,EAAM,GAAKN,UAE/JA,wfA/KX,mMAGA,yiBACA,qHA2BA,+EACA,uDACA,6DACA,uDAaO,IA0DHT,EA1DSsB,EAAiDC"}