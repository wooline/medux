{"version":3,"sources":["../../src/index.tsx"],"names":["createHistory","React","Router","withRouter","renderApp","renderSSR","renderToNodeStream","renderToString","ReactDOM","loadView","exportModule","historyActions","buildApp","moduleGetter","appModuleName","historyOptions","storeOptions","container","historyData","history","historyProxy","Provider","AppMainView","ssrInitStoreKey","WithRouter","app","render","window","hydrate","document","getElementById","buildSSR","renderToStream"],"mappings":"AACA,OAAsFA,aAAtF,KAA0G,YAA1G,CACA,MAAOC,CAAAA,KAAP,KAAkC,OAAlC,CACA,OAAQC,MAAR,CAAgBC,UAAhB,KAAiC,kBAAjC,CACA,OAAQC,SAAR,CAAmBC,SAAnB,KAAmC,cAAnC,CACA,OAAQC,kBAAR,CAA4BC,cAA5B,KAAiD,kBAAjD,CAEA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CAEA;AAEA,OAAQC,QAAR,CAAkBC,YAAlB,KAAqC,cAArC,CAEA,MAAO,IAAIC,CAAAA,cAA8B,CAAG,IAArC,CAEP,MAAO,SAASC,CAAAA,QAAT,CACLC,CADK,CAELC,CAFK,CAGLC,CAHK,CAILC,CAJK,CAKLC,CALK,CAMU,UAFfD,CAEe,GAFfA,CAEe,CAFc,EAEd,WADfC,CACe,GADfA,CACe,CAD0D,MAC1D,KACTC,CAAAA,CAAW,CAAGlB,aAAa,CAACe,CAAD,CADlB,CAERI,CAFQ,CAEiBD,CAFjB,CAERC,OAFQ,CAECC,CAFD,CAEiBF,CAFjB,CAECE,YAFD,CAIf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAjBAT,CAAAA,cAAc,CAAGO,CAAW,CAACP,cAiB7B,CAAOP,SAAS,CACd,SAACiB,CAAD,CAAWC,CAAX,CAAwBC,CAAxB,CAA4C,IACpCC,CAAAA,CAAU,CAAGrB,UAAU,CAACmB,CAAD,CADa,CAEpCG,CAAG,CACP,oBAAC,CAAD,MACE,oBAAC,MAAD,EAAQ,OAAO,CAAEN,CAAjB,EACE,oBAAC,CAAD,MADF,CADF,CAHwC,CAS1C,GAAyB,UAArB,QAAOF,CAAAA,CAAX,CACEA,CAAS,CAACQ,CAAD,CADX,KAEO,CACL,GAAMC,CAAAA,CAAM,CAAGC,MAAM,CAACJ,CAAD,CAAN,CAA0Bf,QAAQ,CAACoB,OAAnC,CAA6CpB,QAAQ,CAACkB,MAArE,CACAA,CAAM,CAACD,CAAD,CAA2B,QAArB,QAAOR,CAAAA,CAAP,CAAgCY,QAAQ,CAACC,cAAT,CAAwBb,CAAxB,CAAhC,CAAqEA,CAA3E,CACP,CACF,CAhBa,CAiBdJ,CAjBc,CAkBdC,CAlBc,CAmBdM,CAnBc,CAoBdJ,CApBc,CAsBjB,CAED,MAAO,SAASe,CAAAA,QAAT,CACLlB,CADK,CAELC,CAFK,CAGLC,CAHK,CAILC,CAJK,CAKLgB,CALK,CAMyE,UAF9EhB,CAE8E,GAF9EA,CAE8E,CAFjD,EAEiD,WAD9EgB,CAC8E,GAD9EA,CAC8E,QACxEd,CAAAA,CAAW,CAAGlB,aAAa,CAACe,CAAD,CAD6C,CAEvEI,CAFuE,CAE9CD,CAF8C,CAEvEC,OAFuE,CAE9DC,CAF8D,CAE9CF,CAF8C,CAE9DE,YAF8D,CAG9ET,cAAc,CAAGO,CAAW,CAACP,cAHiD,CAI9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAMe,CAAAA,CAAM,CAAGM,CAAc,CAAG1B,kBAAH,CAAwBC,cAArD,CACA,MAAOF,CAAAA,SAAS,CACd,SAACgB,CAAD,CAAWC,CAAX,CAA2B,CACzB,MAAOI,CAAAA,CAAM,CACX,oBAAC,CAAD,MACE,oBAAC,MAAD,EAAQ,OAAO,CAAEP,CAAjB,EACE,oBAAC,CAAD,MADF,CADF,CADW,CAOd,CATa,CAUdN,CAVc,CAWdC,CAXc,CAYdM,CAZc,CAadJ,CAbc,CAejB","sourcesContent":["import {RootState as BaseRootState, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport {BrowserHistoryOptions, BrowserLocation, HistoryActions, MemoryHistoryOptions, createHistory} from '@medux/web';\nimport React, {ReactElement} from 'react';\nimport {Router, withRouter} from 'react-router-dom';\nimport {renderApp, renderSSR} from '@medux/react';\nimport {renderToNodeStream, renderToString} from 'react-dom/server';\n\nimport ReactDOM from 'react-dom';\n\n//TODO use StaticRouter\n\nexport {loadView, exportModule} from '@medux/react';\n\nexport let historyActions: HistoryActions = null as any;\n\nexport function buildApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  historyOptions: BrowserHistoryOptions,\n  storeOptions: StoreOptions = {},\n  container: string | Element | ((component: ReactElement<any>) => void) = 'root'\n): Promise<void> {\n  const historyData = createHistory(historyOptions);\n  const {history, historyProxy} = historyData;\n  historyActions = historyData.historyActions;\n  // // SSR需要数据是单向的，store->view，不能store->view->store->view，而view:ConnectedRouter初始化时会触发一次LOCATION_CHANGE\n  // let routerInited = false;\n  // const filterRouter = () => (next: Function) => (action: {type: string}) => {\n  //   if (action.type === '@@router/LOCATION_CHANGE') {\n  //     if (!routerInited) {\n  //       routerInited = true;\n  //       return action;\n  //     } else {\n  //       invalidview();\n  //     }\n  //   }\n  //   return next(action);\n  // };\n  // storeOptions.middlewares = storeOptions.middlewares || [];\n  // storeOptions.middlewares.unshift(filterRouter, routerMiddleware(history));\n\n  return renderApp(\n    (Provider, AppMainView, ssrInitStoreKey) => {\n      const WithRouter = withRouter(AppMainView);\n      const app = (\n        <Provider>\n          <Router history={history}>\n            <WithRouter />\n          </Router>\n        </Provider>\n      );\n      if (typeof container === 'function') {\n        container(app);\n      } else {\n        const render = window[ssrInitStoreKey] ? ReactDOM.hydrate : ReactDOM.render;\n        render(app, typeof container === 'string' ? document.getElementById(container) : container);\n      }\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport function buildSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  historyOptions: MemoryHistoryOptions,\n  storeOptions: StoreOptions = {},\n  renderToStream: boolean = false\n): Promise<{html: string | ReadableStream; data: any; ssrInitStoreKey: string}> {\n  const historyData = createHistory(historyOptions);\n  const {history, historyProxy} = historyData;\n  historyActions = historyData.historyActions;\n  // storeOptions.reducers = storeOptions.reducers || {};\n  // if (storeOptions.reducers && storeOptions.reducers.router) {\n  //   throw new Error(\"the reducer name 'router' is not allowed\");\n  // }\n  // const router = connectRouter(history);\n  // storeOptions.reducers.router = (state, action) => {\n  //   const routerData = router(state.router, action as any);\n  //   if (storeOptions.routerParser && state.router !== routerData) {\n  //     state.router = storeOptions.routerParser(routerData, state.router);\n  //   } else {\n  //     state.router = routerData;\n  //   }\n  // };\n  // let routerInited = false;\n  // const filterRouter = () => (next: Function) => (action: {type: string}) => {\n  //   if (action.type === '@@router/LOCATION_CHANGE') {\n  //     if (!routerInited) {\n  //       routerInited = true;\n  //       return action;\n  //     } else {\n  //       invalidview();\n  //     }\n  //   }\n  //   return next(action);\n  // };\n  // storeOptions.middlewares = storeOptions.middlewares || [];\n  // storeOptions.middlewares.unshift(filterRouter, routerMiddleware(history));\n  const render = renderToStream ? renderToNodeStream : renderToString;\n  return renderSSR(\n    (Provider, AppMainView) => {\n      return render(\n        <Provider>\n          <Router history={history}>\n            <AppMainView />\n          </Router>\n        </Provider>\n      );\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport type RootState<G extends ModuleGetter> = BaseRootState<G, BrowserLocation>;\n"],"file":"index.js"}