{"version":3,"sources":["../../src/index.tsx"],"names":["historyActions","undefined","transformRoute","getHistoryActions","toUrl","args","length","location","routeToLocation","pathname","search","hash","url","buildApp","moduleGetter","appModuleName","history","routeConfig","storeOptions","container","historyData","historyProxy","Provider","AppMainView","ssrInitStoreKey","WithRouter","app","render","window","ReactDOM","hydrate","document","getElementById","buildSSR","renderToStream","listen","renderToNodeStream","renderToString"],"mappings":"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","sourcesContent":["import {RootState as BaseRootState, ModuleGetter, RouteData, StoreOptions} from '@medux/core/types/export';\nimport {BrowserRoutePayload, RouteConfig, RoutePayload, buildTransformRoute, fillRouteData, getBrowserRouteActions} from '@medux/route-plan-a';\nimport {History, createLocation} from 'history';\nimport {HistoryActions, Location, TransformRoute, createHistory} from '@medux/web';\nimport React, {ReactElement} from 'react';\nimport {Router, StaticRouter, withRouter} from 'react-router-dom';\nimport {renderApp, renderSSR} from '@medux/react';\nimport {renderToNodeStream, renderToString} from 'react-dom/server';\n\nimport ReactDOM from 'react-dom';\n\nexport {loadView, exportModule} from '@medux/react';\nexport {ActionTypes, LoadingState, exportActions, BaseModelHandlers, effect, errorAction, reducer} from '@medux/core';\nexport {setRouteConfig} from '@medux/route-plan-a';\n\nlet historyActions: HistoryActions<RouteData> | undefined = undefined;\nlet transformRoute: TransformRoute | undefined = undefined;\n\nexport function getHistoryActions<T>() {\n  return getBrowserRouteActions<T>(() => historyActions!);\n}\nexport interface ToUrl<T> {\n  (routeOptions: BrowserRoutePayload<T>): string;\n  (pathname: string, search: string, hash: string): string;\n}\nexport function toUrl(routeOptions: BrowserRoutePayload<any>): string;\nexport function toUrl(pathname: string, search: string, hash: string): string;\nexport function toUrl(...args: any[]): string {\n  if (args.length === 1) {\n    const location = transformRoute!.routeToLocation(fillRouteData(args[0] as RoutePayload<any>));\n    args = [location.pathname, location.search, location.hash];\n  }\n  const [pathname, search, hash] = args as [string, string, string];\n  let url = pathname;\n  if (search) {\n    url += search;\n  }\n  if (hash) {\n    url += hash;\n  }\n  return url;\n}\nexport function buildApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  history: History,\n  routeConfig: RouteConfig,\n  storeOptions: StoreOptions = {},\n  container: string | Element | ((component: ReactElement<any>) => void) = 'root'\n) {\n  transformRoute = buildTransformRoute(routeConfig);\n  const historyData = createHistory(history, transformRoute);\n  const {historyProxy} = historyData;\n  historyActions = historyData.historyActions;\n\n  return renderApp(\n    (Provider, AppMainView, ssrInitStoreKey) => {\n      const WithRouter = withRouter(AppMainView);\n      const app = (\n        <Provider>\n          <Router history={history}>\n            <WithRouter />\n          </Router>\n        </Provider>\n      );\n      if (typeof container === 'function') {\n        container(app);\n      } else {\n        const render = window[ssrInitStoreKey] ? ReactDOM.hydrate : ReactDOM.render;\n        render(app, typeof container === 'string' ? document.getElementById(container) : container);\n      }\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport function buildSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  location: string,\n  transformRoute: TransformRoute,\n  storeOptions: StoreOptions = {},\n  renderToStream: boolean = false\n): Promise<{html: string | ReadableStream; data: any; ssrInitStoreKey: string}> {\n  const historyData = createHistory({listen: () => void 0, location: createLocation(location)} as any, transformRoute);\n  const {historyProxy} = historyData;\n  historyActions = historyData.historyActions;\n\n  const render = renderToStream ? renderToNodeStream : renderToString;\n  return renderSSR(\n    (Provider, AppMainView) => {\n      return render(\n        <Provider>\n          <StaticRouter location={location}>\n            <AppMainView />\n          </StaticRouter>\n        </Provider>\n      );\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport type RootState<G extends ModuleGetter> = BaseRootState<G, Location>;\n"],"file":"index.js"}