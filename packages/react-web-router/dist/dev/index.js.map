{"version":3,"sources":["../../src/index.tsx"],"names":["createHistory","React","Router","withRouter","renderApp","renderSSR","renderToNodeStream","renderToString","ReactDOM","loadView","exportModule","ActionTypes","LoadingState","exportActions","BaseModelHandlers","effect","errorAction","reducer","historyActions","undefined","getHistoryActions","buildApp","moduleGetter","appModuleName","historyOptions","storeOptions","container","historyData","history","historyProxy","Provider","AppMainView","ssrInitStoreKey","WithRouter","app","render","window","hydrate","document","getElementById","buildSSR","renderToStream"],"mappings":"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","sourcesContent":["import {RootState as BaseRootState, ModuleGetter, RouteData, StoreOptions} from '@medux/core/types/export';\nimport {BrowserHistoryOptions, BrowserLocation, HistoryActions, MemoryHistoryOptions, createHistory} from '@medux/web';\nimport React, {ReactElement} from 'react';\nimport {Router, withRouter} from 'react-router-dom';\nimport {renderApp, renderSSR} from '@medux/react';\nimport {renderToNodeStream, renderToString} from 'react-dom/server';\n\nimport ReactDOM from 'react-dom';\n\n//TODO use StaticRouter\n\nexport {loadView, exportModule} from '@medux/react';\n\nexport {ActionTypes, LoadingState, exportActions, BaseModelHandlers, effect, errorAction, reducer} from '@medux/core';\n\nlet historyActions: HistoryActions<RouteData> | undefined = undefined;\n\nexport function getHistoryActions() {\n  return historyActions!;\n}\n\nexport function buildApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  historyOptions: BrowserHistoryOptions,\n  storeOptions: StoreOptions = {},\n  container: string | Element | ((component: ReactElement<any>) => void) = 'root'\n): Promise<void> {\n  const historyData = createHistory(historyOptions);\n  const {history, historyProxy} = historyData;\n  historyActions = historyData.historyActions;\n  // // SSR需要数据是单向的，store->view，不能store->view->store->view，而view:ConnectedRouter初始化时会触发一次LOCATION_CHANGE\n  // let routerInited = false;\n  // const filterRouter = () => (next: Function) => (action: {type: string}) => {\n  //   if (action.type === '@@router/LOCATION_CHANGE') {\n  //     if (!routerInited) {\n  //       routerInited = true;\n  //       return action;\n  //     } else {\n  //       invalidview();\n  //     }\n  //   }\n  //   return next(action);\n  // };\n  // storeOptions.middlewares = storeOptions.middlewares || [];\n  // storeOptions.middlewares.unshift(filterRouter, routerMiddleware(history));\n\n  return renderApp(\n    (Provider, AppMainView, ssrInitStoreKey) => {\n      const WithRouter = withRouter(AppMainView);\n      const app = (\n        <Provider>\n          <Router history={history}>\n            <WithRouter />\n          </Router>\n        </Provider>\n      );\n      if (typeof container === 'function') {\n        container(app);\n      } else {\n        const render = window[ssrInitStoreKey] ? ReactDOM.hydrate : ReactDOM.render;\n        render(app, typeof container === 'string' ? document.getElementById(container) : container);\n      }\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport function buildSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  historyOptions: MemoryHistoryOptions,\n  storeOptions: StoreOptions = {},\n  renderToStream: boolean = false\n): Promise<{html: string | ReadableStream; data: any; ssrInitStoreKey: string}> {\n  const historyData = createHistory(historyOptions);\n  const {history, historyProxy} = historyData;\n  historyActions = historyData.historyActions;\n  // storeOptions.reducers = storeOptions.reducers || {};\n  // if (storeOptions.reducers && storeOptions.reducers.router) {\n  //   throw new Error(\"the reducer name 'router' is not allowed\");\n  // }\n  // const router = connectRouter(history);\n  // storeOptions.reducers.router = (state, action) => {\n  //   const routerData = router(state.router, action as any);\n  //   if (storeOptions.routerParser && state.router !== routerData) {\n  //     state.router = storeOptions.routerParser(routerData, state.router);\n  //   } else {\n  //     state.router = routerData;\n  //   }\n  // };\n  // let routerInited = false;\n  // const filterRouter = () => (next: Function) => (action: {type: string}) => {\n  //   if (action.type === '@@router/LOCATION_CHANGE') {\n  //     if (!routerInited) {\n  //       routerInited = true;\n  //       return action;\n  //     } else {\n  //       invalidview();\n  //     }\n  //   }\n  //   return next(action);\n  // };\n  // storeOptions.middlewares = storeOptions.middlewares || [];\n  // storeOptions.middlewares.unshift(filterRouter, routerMiddleware(history));\n  const render = renderToStream ? renderToNodeStream : renderToString;\n  return renderSSR(\n    (Provider, AppMainView) => {\n      return render(\n        <Provider>\n          <Router history={history}>\n            <AppMainView />\n          </Router>\n        </Provider>\n      );\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport type RootState<G extends ModuleGetter> = BaseRootState<G, BrowserLocation>;\n"],"file":"index.js"}