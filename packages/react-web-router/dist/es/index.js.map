{"version":3,"sources":["../../src/index.tsx"],"names":["buildTransformRoute","fillRouteData","getBrowserRouteActions","createLocation","createHistory","React","Router","StaticRouter","withRouter","renderApp","renderSSR","renderToNodeStream","renderToString","ReactDOM","loadView","exportModule","ActionTypes","LoadingState","exportActions","BaseModelHandlers","effect","errorAction","reducer","setRouteConfig","historyActions","undefined","transformRoute","getHistoryActions","toUrl","args","length","location","routeToLocation","pathname","search","hash","url","buildApp","moduleGetter","appModuleName","history","routeConfig","storeOptions","container","historyData","historyProxy","Provider","AppMainView","ssrInitStoreKey","WithRouter","app","render","window","hydrate","document","getElementById","buildSSR","renderToStream","listen"],"mappings":"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","sourcesContent":["import {RootState as BaseRootState, ModuleGetter, RouteData, StoreOptions} from '@medux/core/types/export';\nimport {BrowserHistoryActions, BrowserRoutePayload, RouteConfig, RoutePayload, buildTransformRoute, fillRouteData, getBrowserRouteActions} from '@medux/route-plan-a';\nimport {History, createLocation} from 'history';\nimport {HistoryActions, Location, TransformRoute, createHistory} from '@medux/web';\nimport React, {ReactElement} from 'react';\nimport {Router, StaticRouter, withRouter} from 'react-router-dom';\nimport {renderApp, renderSSR} from '@medux/react';\nimport {renderToNodeStream, renderToString} from 'react-dom/server';\n\nimport ReactDOM from 'react-dom';\n\nexport {loadView, exportModule} from '@medux/react';\nexport {ActionTypes, LoadingState, exportActions, BaseModelHandlers, effect, errorAction, reducer} from '@medux/core';\nexport {setRouteConfig} from '@medux/route-plan-a';\n\nlet historyActions: HistoryActions<RouteData> | undefined = undefined;\nlet transformRoute: TransformRoute | undefined = undefined;\n\nexport function getHistoryActions<T>(): BrowserHistoryActions<BrowserRoutePayload<T>> {\n  return getBrowserRouteActions<T>(() => historyActions!);\n}\nexport interface ToUrl<T> {\n  (routeOptions: BrowserRoutePayload<T>): string;\n  (pathname: string, search: string, hash: string): string;\n}\nexport function toUrl(routeOptions: BrowserRoutePayload<any>): string;\nexport function toUrl(pathname: string, search: string, hash: string): string;\nexport function toUrl(...args: any[]): string {\n  if (args.length === 1) {\n    const location = transformRoute!.routeToLocation(fillRouteData(args[0] as RoutePayload<any>));\n    args = [location.pathname, location.search, location.hash];\n  }\n  const [pathname, search, hash] = args as [string, string, string];\n  let url = pathname;\n  if (search) {\n    url += search;\n  }\n  if (hash) {\n    url += hash;\n  }\n  return url;\n}\nexport function buildApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  history: History,\n  routeConfig: RouteConfig,\n  storeOptions: StoreOptions = {},\n  container: string | Element | ((component: ReactElement<any>) => void) = 'root'\n) {\n  transformRoute = buildTransformRoute(routeConfig);\n  const historyData = createHistory(history, transformRoute);\n  const {historyProxy} = historyData;\n  historyActions = historyData.historyActions;\n\n  return renderApp(\n    (Provider, AppMainView, ssrInitStoreKey) => {\n      const WithRouter = withRouter(AppMainView);\n      const app = (\n        <Provider>\n          <Router history={history}>\n            <WithRouter />\n          </Router>\n        </Provider>\n      );\n      if (typeof container === 'function') {\n        container(app);\n      } else {\n        const render = window[ssrInitStoreKey] ? ReactDOM.hydrate : ReactDOM.render;\n        render(app, typeof container === 'string' ? document.getElementById(container) : container);\n      }\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport function buildSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  location: string,\n  transformRoute: TransformRoute,\n  storeOptions: StoreOptions = {},\n  renderToStream: boolean = false\n): Promise<{html: string | ReadableStream; data: any; ssrInitStoreKey: string}> {\n  const historyData = createHistory({listen: () => void 0, location: createLocation(location)} as any, transformRoute);\n  const {historyProxy} = historyData;\n  historyActions = historyData.historyActions;\n\n  const render = renderToStream ? renderToNodeStream : renderToString;\n  return renderSSR(\n    (Provider, AppMainView) => {\n      return render(\n        <Provider>\n          <StaticRouter location={location}>\n            <AppMainView />\n          </StaticRouter>\n        </Provider>\n      );\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport type RootState<G extends ModuleGetter> = BaseRootState<G, Location>;\n"],"file":"index.js"}