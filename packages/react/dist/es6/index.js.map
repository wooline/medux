{"version":3,"sources":["../../src/index.tsx"],"names":["React","exportModule","baseExportModule","renderApp","baseRenderApp","renderSSR","baseRenderSSR","getView","isPromiseView","Provider","render","moduleGetter","appModuleName","historyProxy","storeOptions","store","appModel","appViews","ssrInitStoreKey","ReduxProvider","props","children","Main","data","getState","html","loadView","moduleName","viewName","modelOptions","Loading","Loader","Component","constructor","context","moduleViewResult","then","Object","keys","forEach","key","setState","state"],"mappings":"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","sourcesContent":["import {LoadView as BaseLoadView, ExportModule, HistoryProxy, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport React, {ComponentType, ReactNode} from 'react';\nimport {exportModule as baseExportModule, renderApp as baseRenderApp, renderSSR as baseRenderSSR, getView, isPromiseView} from '@medux/core';\n\nimport {Provider} from 'react-redux';\n\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: any, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  historyProxy: HistoryProxy,\n  storeOptions: StoreOptions\n) {\n  return baseRenderApp(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: ComponentType<any>;\n      },\n      ssrInitStoreKey\n    ) => {\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      render(ReduxProvider, appViews.Main, ssrInitStoreKey);\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>) => any,\n  moduleGetter: M,\n  appModuleName: A,\n  historyProxy: HistoryProxy,\n  storeOptions: StoreOptions = {}\n) {\n  return baseRenderSSR(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType;\n      },\n      ssrInitStoreKey\n    ) => {\n      const data = store.getState();\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      return {\n        store,\n        ssrInitStoreKey,\n        data,\n        html: render(ReduxProvider, appViews.Main),\n      };\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\ninterface LoadViewState {\n  Component: ComponentType<any> | null;\n}\nexport type LoadView<T extends ModuleGetter> = BaseLoadView<T, ComponentType<any>>;\nexport const loadView: LoadView<any> = (moduleName, viewName, modelOptions, Loading) => {\n  return class Loader extends React.Component {\n    public state: LoadViewState = {\n      Component: null,\n    };\n    public constructor(props: any, context?: any) {\n      super(props, context);\n      const moduleViewResult = getView<ComponentType>(moduleName, viewName, modelOptions);\n      if (isPromiseView<ComponentType>(moduleViewResult)) {\n        moduleViewResult.then(Component => {\n          Object.keys(Loader).forEach(key => (Component[key] = Loader[key]));\n          Object.keys(Component).forEach(key => (Loader[key] = Component[key]));\n          this.setState({\n            Component,\n          });\n        });\n      } else {\n        Object.keys(Loader).forEach(key => (moduleViewResult[key] = Loader[key]));\n        Object.keys(moduleViewResult).forEach(key => (Loader[key] = moduleViewResult[key]));\n        this.state = {\n          Component: moduleViewResult,\n        };\n      }\n    }\n    public render() {\n      const {Component} = this.state;\n      return Component ? <Component {...this.props} /> : Loading ? <Loading {...this.props} /> : null;\n    }\n  } as any;\n};\n\nexport const exportModule: ExportModule<ComponentType<any>> = baseExportModule;\n"],"file":"index.js"}