{"version":3,"file":"index.min.js","sources":["../../src/index.tsx"],"sourcesContent":["import * as core from '@medux/core';\n\nimport {ExportModule, HistoryProxy, ModuleGetter, StoreOptions, StoreState, getView, isPromiseView} from '@medux/core';\nimport React, {ComponentType, FC, ReactElement, useState} from 'react';\nimport {renderToNodeStream, renderToString} from 'react-dom/server';\n\nimport {Provider} from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport {Store} from 'redux';\n\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  historyProxy: HistoryProxy,\n  storeOptions: StoreOptions,\n  container: string | Element | ((component: ReactElement<any>) => void) = 'root',\n  beforeRender?: (store: Store<StoreState>) => Store<StoreState>\n) {\n  return core.renderApp(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: ComponentType<any>;\n      },\n      ssrInitStoreKey\n    ) => {\n      const reduxProvider = (\n        <Provider store={store}>\n          <appViews.Main />\n        </Provider>\n      );\n      if (typeof container === 'function') {\n        container(reduxProvider);\n      } else {\n        const render = window[ssrInitStoreKey] ? ReactDOM.hydrate : ReactDOM.render;\n        render(reduxProvider, typeof container === 'string' ? document.getElementById(container) : container);\n      }\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions,\n    beforeRender\n  );\n}\n\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  historyProxy: HistoryProxy,\n  storeOptions: StoreOptions = {},\n  renderToStream: boolean = false,\n  beforeRender?: (store: Store<StoreState>) => Store<StoreState>\n) {\n  return core.renderSSR(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType;\n      },\n      ssrInitStoreKey\n    ) => {\n      const data = store.getState();\n      const reduxProvider = (\n        <Provider store={store}>\n          <appViews.Main />\n        </Provider>\n      );\n      const render = renderToStream ? renderToNodeStream : renderToString;\n      return {\n        store,\n        ssrInitStoreKey,\n        data,\n        html: render(reduxProvider),\n      };\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions,\n    beforeRender\n  );\n}\n\nexport type LoadView<T extends ModuleGetter> = core.LoadView<T, {forwardRef?: boolean}, ComponentType<any>>;\n\nexport const loadView: LoadView<any> = (moduleName, viewName, options, Loading) => {\n  const {forwardRef, ...modelOptions} = options || {};\n  const Loader: FC<any> = function ViewLoader(props: any) {\n    const [view, setView] = useState<{Component: ComponentType} | null>(() => {\n      const moduleViewResult = getView<ComponentType>(moduleName, viewName, modelOptions);\n      if (isPromiseView<ComponentType>(moduleViewResult)) {\n        moduleViewResult.then((Component) => {\n          // loader.propTypes = Component.propTypes;\n          // loader.contextTypes = Component.contextTypes;\n          // loader.defaultProps = Component.defaultProps;\n          // Object.keys(loader).forEach(key => (Component[key] = loader[key]));\n          // Object.keys(Component).forEach(key => (loader[key] = Component[key]));\n          setView({Component});\n        });\n        return null;\n      } else {\n        // loader.propTypes = moduleViewResult.propTypes;\n        // loader.contextTypes = moduleViewResult.contextTypes;\n        // loader.defaultProps = moduleViewResult.defaultProps;\n        // Object.keys(loader).forEach(key => (moduleViewResult[key] = loader[key]));\n        // Object.keys(moduleViewResult).forEach(key => (loader[key] = moduleViewResult[key]));\n        return {Component: moduleViewResult};\n      }\n    });\n    const {forwardRef, ...other} = props;\n    const ref = forwardRef ? {ref: forwardRef} : {};\n    return view ? <view.Component {...other} {...ref} /> : Loading ? <Loading {...props} /> : null;\n  };\n  // eslint-disable-next-line react/display-name\n  const Component = forwardRef ? React.forwardRef((props, ref) => <Loader {...props} forwardRef={ref} />) : Loader;\n\n  return Component as any;\n};\n\n// export const loadView: LoadView<any> = (moduleName, viewName, options, Loading) => {\n//   return class Loader extends React.Component {\n//     public state: LoadViewState = {\n//       Component: null,\n//     };\n//     public constructor(props: any, context?: any) {\n//       super(props, context);\n//       const moduleViewResult = getView<ComponentType>(moduleName, viewName, options);\n//       if (isPromiseView<ComponentType>(moduleViewResult)) {\n//         moduleViewResult.then(Component => {\n//           Object.keys(Loader).forEach(key => (Component[key] = Loader[key]));\n//           Object.keys(Component).forEach(key => (Loader[key] = Component[key]));\n//           this.setState({\n//             Component,\n//           });\n//         });\n//       } else {\n//         Object.keys(Loader).forEach(key => (moduleViewResult[key] = Loader[key]));\n//         Object.keys(moduleViewResult).forEach(key => (Loader[key] = moduleViewResult[key]));\n//         this.state = {\n//           Component: moduleViewResult,\n//         };\n//       }\n//     }\n//     public render() {\n//       const {Component} = this.state;\n//       return Component ? <Component {...this.props} /> : Loading ? <Loading {...this.props} /> : null;\n//     }\n//   } as any;\n// };\n\nexport const exportModule: ExportModule<ComponentType<any>> = core.exportModule;\n"],"names":["exportModule","core","moduleName","viewName","options","Loading","forwardRef","modelOptions","Loader","props","useState","moduleViewResult","getView","isPromiseView","then","Component","setView","view","other","ref","React","moduleGetter","appModuleName","historyProxy","storeOptions","container","beforeRender","store","appModel","appViews","ssrInitStoreKey","reduxProvider","Provider","Main","window","ReactDOM","hydrate","render","document","getElementById","renderToStream","data","getState","html","renderToNodeStream","renderToString"],"mappings":"yYAyJaA,EAAiDC,uDAjEvB,SAACC,EAAYC,EAAUC,EAASC,SAC/BD,GAAW,GAA1CE,IAAAA,WAAeC,sBAChBC,EAAkB,SAAoBC,SAClBC,YAA4C,eAC5DC,EAAmBC,UAAuBV,EAAYC,EAAUI,UAClEM,gBAA6BF,IAC/BA,EAAiBG,MAAK,SAACC,GAMrBC,EAAQ,CAACD,UAAAA,OAEJ,MAOA,CAACA,UAAWJ,MAlBhBM,OAAMD,OAqBNV,EAAwBG,EAAxBH,WAAeY,IAAST,kBACzBU,EAAMb,EAAa,CAACa,IAAKb,GAAc,UACtCW,EAAOG,gBAACH,EAAKF,eAAcG,EAAWC,IAAUd,EAAUe,gBAACf,EAAYI,GAAY,aAG1EH,EAAac,EAAMd,YAAW,SAACG,EAAOU,UAAQC,gBAACZ,OAAWC,GAAOH,WAAYa,QAAWX,qBA3GrG,SACLa,EACAC,EACAC,EACAC,EACAC,EACAC,mBADAD,IAAAA,EAAyE,QAGlExB,aACL,SACE0B,EACAC,EACAC,EAGAC,OAEMC,EACJX,gBAACY,YAASL,MAAOA,GACfP,gBAACS,EAASI,YAGW,mBAAdR,EACTA,EAAUM,IAEKG,OAAOJ,GAAmBK,EAASC,QAAUD,EAASE,QAC9DN,EAAoC,iBAAdN,EAAyBa,SAASC,eAAed,GAAaA,KAG/FJ,EACAC,EACAC,EACAC,EACAE,sBAIG,SACLL,EACAC,EACAC,EACAC,EACAgB,EACAd,mBAFAF,IAAAA,EAA6B,aAC7BgB,IAAAA,GAA0B,GAGnBvC,aACL,SACE0B,EACAC,EACAC,EAGAC,OAEMW,EAAOd,EAAMe,WACbX,EACJX,gBAACY,YAASL,MAAOA,GACfP,gBAACS,EAASI,kBAIP,CACLN,MAAAA,EACAG,gBAAAA,EACAW,KAAAA,EACAE,MALaH,EAAiBI,qBAAqBC,kBAKtCd,MAGjBV,EACAC,EACAC,EACAC,EACAE"}