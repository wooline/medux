{"version":3,"sources":["../../src/index.tsx"],"names":["renderApp","render","moduleGetter","appModuleName","historyProxy","storeOptions","store","appModel","appViews","ssrInitStoreKey","ReduxProvider","props","children","Main","renderSSR","data","getState","html","loadView","moduleName","viewName","Loading","context","Component","moduleViewResult","then","Object","keys","Loader","forEach","key","setState","state","React","exportModule","baseExportModule"],"mappings":";;;;;;;;;;;;;;;AACA;;AACA;;AAEA;;AAEO,SAASA,SAAT,CACLC,MADK,EAELC,YAFK,EAGLC,aAHK,EAILC,YAJK,EAKLC,YALK,EAML;AACA,SAAO,qBACL,UACEC,KADF,EAEEC,QAFF,EAGEC,QAHF,EAMEC,eANF,EAOK;AACH,QAAMC,aAAmD,GAAG,SAAtDA,aAAsD,CAAAC,KAAK,EAAI;AACnE;AACA,aAAO,6BAAC,oBAAD;AAAU,QAAA,KAAK,EAAEL;AAAjB,SAAyBK,KAAK,CAACC,QAA/B,CAAP;AACD,KAHD;;AAIAX,IAAAA,MAAM,CAACS,aAAD,EAAgBF,QAAQ,CAACK,IAAzB,EAA+BJ,eAA/B,CAAN;AACD,GAdI,EAeLP,YAfK,EAgBLC,aAhBK,EAiBLC,YAjBK,EAkBLC,YAlBK,CAAP;AAoBD;;AAEM,SAASS,SAAT,CACLb,MADK,EAELC,YAFK,EAGLC,aAHK,EAILC,YAJK,EAKLC,YALK,EAML;AAAA,MADAA,YACA;AADAA,IAAAA,YACA,GAD6B,EAC7B;AAAA;;AACA,SAAO,qBACL,UACEC,KADF,EAEEC,QAFF,EAGEC,QAHF,EAMEC,eANF,EAOK;AACH,QAAMM,IAAI,GAAGT,KAAK,CAACU,QAAN,EAAb;;AACA,QAAMN,aAAmD,GAAG,SAAtDA,aAAsD,CAAAC,KAAK,EAAI;AACnE;AACA,aAAO,6BAAC,oBAAD;AAAU,QAAA,KAAK,EAAEL;AAAjB,SAAyBK,KAAK,CAACC,QAA/B,CAAP;AACD,KAHD;;AAIA,WAAO;AACLN,MAAAA,KAAK,EAALA,KADK;AAELG,MAAAA,eAAe,EAAfA,eAFK;AAGLM,MAAAA,IAAI,EAAJA,IAHK;AAILE,MAAAA,IAAI,EAAEhB,MAAM,CAACS,aAAD,EAAgBF,QAAQ,CAACK,IAAzB;AAJP,KAAP;AAMD,GApBI,EAqBLX,YArBK,EAsBLC,aAtBK,EAuBLC,YAvBK,EAwBLC,YAxBK,CAAP;AA0BD;;AAIM,IAAMa,QAA2C,GAAG,SAA9CA,QAA8C,CAACC,UAAD,EAAaC,QAAb,EAAuBC,OAAvB,EAAmC;AAAA;;AAC5F;AAAA;AAAA;AAAA;;AAIE,oBAAmBV,KAAnB,EAA+BW,OAA/B,EAA8C;AAAA;;AAC5C,0CAAMX,KAAN,EAAaW,OAAb;AAD4C,0FAHhB;AAC5BC,QAAAA,SAAS,EAAE;AADiB,OAGgB;AAE5C,UAAMC,gBAAgB,GAAG,mBAAuBL,UAAvB,EAAmCC,QAAnC,CAAzB;;AACA,UAAI,yBAA6BI,gBAA7B,CAAJ,EAAoD;AAClDA,QAAAA,gBAAgB,CAACC,IAAjB,CAAsB,UAAAF,SAAS,EAAI;AACjCG,UAAAA,MAAM,CAACC,IAAP,CAAYC,MAAZ,EAAoBC,OAApB,CAA4B,UAAAC,GAAG;AAAA,mBAAKP,SAAS,CAACO,GAAD,CAAT,GAAiBF,MAAM,CAACE,GAAD,CAA5B;AAAA,WAA/B;AACAJ,UAAAA,MAAM,CAACC,IAAP,CAAYJ,SAAZ,EAAuBM,OAAvB,CAA+B,UAAAC,GAAG;AAAA,mBAAKF,MAAM,CAACE,GAAD,CAAN,GAAcP,SAAS,CAACO,GAAD,CAA5B;AAAA,WAAlC;;AACA,gBAAKC,QAAL,CAAc;AACZR,YAAAA,SAAS,EAATA;AADY,WAAd;AAGD,SAND;AAOD,OARD,MAQO;AACLG,QAAAA,MAAM,CAACC,IAAP,CAAYC,MAAZ,EAAoBC,OAApB,CAA4B,UAAAC,GAAG;AAAA,iBAAKN,gBAAgB,CAACM,GAAD,CAAhB,GAAwBF,MAAM,CAACE,GAAD,CAAnC;AAAA,SAA/B;AACAJ,QAAAA,MAAM,CAACC,IAAP,CAAYH,gBAAZ,EAA8BK,OAA9B,CAAsC,UAAAC,GAAG;AAAA,iBAAKF,MAAM,CAACE,GAAD,CAAN,GAAcN,gBAAgB,CAACM,GAAD,CAAnC;AAAA,SAAzC;AACA,cAAKE,KAAL,GAAa;AACXT,UAAAA,SAAS,EAAEC;AADA,SAAb;AAGD;;AAjB2C;AAkB7C;;AAtBH;;AAAA,WAuBSvB,MAvBT,GAuBE,kBAAgB;AAAA,UACPsB,SADO,GACM,KAAKS,KADX,CACPT,SADO;AAEd,aAAOA,SAAS,GAAG,6BAAC,SAAD,EAAe,KAAKZ,KAApB,CAAH,GAAmCU,OAAO,GAAG,6BAAC,OAAD,EAAa,KAAKV,KAAlB,CAAH,GAAiC,IAA3F;AACD,KA1BH;;AAAA;AAAA,IAA4BsB,eAAMV,SAAlC;AA4BD,CA7BM;;;AA+BA,IAAMW,YAA8C,GAAGC,kBAAvD","sourcesContent":["import {ExportModule, HistoryProxy, LoadView, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport React, {ComponentType, ReactNode} from 'react';\nimport {exportModule as baseExportModule, renderApp as baseRenderApp, renderSSR as baseRenderSSR, getView, isPromiseView} from '@medux/core';\n\nimport {Provider} from 'react-redux';\n\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: any, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  historyProxy: HistoryProxy,\n  storeOptions: StoreOptions\n) {\n  return baseRenderApp(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: ComponentType<any>;\n      },\n      ssrInitStoreKey\n    ) => {\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      render(ReduxProvider, appViews.Main, ssrInitStoreKey);\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>) => any,\n  moduleGetter: M,\n  appModuleName: A,\n  historyProxy: HistoryProxy,\n  storeOptions: StoreOptions = {}\n) {\n  return baseRenderSSR(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType;\n      },\n      ssrInitStoreKey\n    ) => {\n      const data = store.getState();\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      return {\n        store,\n        ssrInitStoreKey,\n        data,\n        html: render(ReduxProvider, appViews.Main),\n      };\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\ninterface LoadViewState {\n  Component: ComponentType<any> | null;\n}\nexport const loadView: LoadView<any, ComponentType<any>> = (moduleName, viewName, Loading) => {\n  return class Loader extends React.Component {\n    public state: LoadViewState = {\n      Component: null,\n    };\n    public constructor(props: any, context?: any) {\n      super(props, context);\n      const moduleViewResult = getView<ComponentType>(moduleName, viewName);\n      if (isPromiseView<ComponentType>(moduleViewResult)) {\n        moduleViewResult.then(Component => {\n          Object.keys(Loader).forEach(key => (Component[key] = Loader[key]));\n          Object.keys(Component).forEach(key => (Loader[key] = Component[key]));\n          this.setState({\n            Component,\n          });\n        });\n      } else {\n        Object.keys(Loader).forEach(key => (moduleViewResult[key] = Loader[key]));\n        Object.keys(moduleViewResult).forEach(key => (Loader[key] = moduleViewResult[key]));\n        this.state = {\n          Component: moduleViewResult,\n        };\n      }\n    }\n    public render() {\n      const {Component} = this.state;\n      return Component ? <Component {...this.props} /> : Loading ? <Loading {...this.props} /> : null;\n    }\n  } as any;\n};\n\nexport const exportModule: ExportModule<ComponentType<any>> = baseExportModule;\n"],"file":"index.js"}