{"version":3,"sources":["../../src/index.tsx"],"names":["React","useEffect","useState","exportModule","baseExportModule","renderApp","baseRenderApp","renderSSR","baseRenderSSR","getView","isPromiseView","viewWillMount","viewWillUnmount","Provider","render","moduleGetter","appModuleName","storeOptions","store","appModel","appViews","ssrInitStoreKey","ReduxProvider","props","children","Main","data","getState","html","loadView","moduleName","viewName","Loading","loader","Loader","moduleViewResult","then","Component","propTypes","contextTypes","defaultProps","setView","view"],"mappings":"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","sourcesContent":["import {ExportModule, LoadView, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport React, {ComponentType, FunctionComponent, ReactNode, useEffect, useState} from 'react';\nimport {exportModule as baseExportModule, renderApp as baseRenderApp, renderSSR as baseRenderSSR, getView, isPromiseView, viewWillMount, viewWillUnmount} from '@medux/core';\n\nimport {Provider} from 'react-redux';\n\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions\n): Promise<void> {\n  return baseRenderApp(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: ComponentType<any>;\n      },\n      ssrInitStoreKey\n    ) => {\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      render(ReduxProvider, appViews.Main, ssrInitStoreKey);\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>) => any,\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions = {}\n) {\n  return baseRenderSSR(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType;\n      },\n      ssrInitStoreKey\n    ) => {\n      const data = store.getState();\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      return {\n        ssrInitStoreKey,\n        data,\n        html: render(ReduxProvider, appViews.Main),\n      };\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport const loadView: LoadView = (moduleGetter, moduleName, viewName, Loading?: ComponentType<any>) => {\n  const loader: FunctionComponent<any> = function Loader(props: any) {\n    const [view, setView] = useState<{Component: ComponentType} | null>(() => {\n      const moduleViewResult = getView<ComponentType>(moduleGetter, moduleName, viewName);\n      if (isPromiseView<ComponentType>(moduleViewResult)) {\n        moduleViewResult.then(Component => {\n          loader.propTypes = Component.propTypes;\n          loader.contextTypes = Component.contextTypes;\n          loader.defaultProps = Component.defaultProps;\n          setView({Component});\n        });\n        return null;\n      } else {\n        loader.propTypes = moduleViewResult.propTypes;\n        loader.contextTypes = moduleViewResult.contextTypes;\n        loader.defaultProps = moduleViewResult.defaultProps;\n        return {Component: moduleViewResult};\n      }\n    });\n    useEffect(() => {\n      if (view) {\n        viewWillMount(moduleName, viewName);\n        return () => {\n          viewWillUnmount(moduleName, viewName);\n        };\n      } else {\n        return void 0;\n      }\n    }, [view]);\n    return view ? <view.Component {...props} /> : Loading ? <Loading {...props} /> : null;\n  };\n  return loader as any;\n};\n\nexport const exportModule: ExportModule<ComponentType<any>> = baseExportModule;\n"],"file":"index.js"}