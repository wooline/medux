{"version":3,"sources":["../../src/index.tsx"],"names":["React","useState","exportModule","baseExportModule","renderApp","baseRenderApp","renderSSR","baseRenderSSR","getView","isPromiseView","Provider","render","moduleGetter","appModuleName","historyProxy","storeOptions","store","appModel","appViews","ssrInitStoreKey","ReduxProvider","props","children","Main","data","getState","html","loadView","moduleName","viewName","Loading","loader","Loader","moduleViewResult","then","Component","Object","keys","forEach","key","setView","view"],"mappings":"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","sourcesContent":["import {ExportModule, HistoryProxy, LoadView, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport React, {ComponentType, FunctionComponent, ReactNode, useState} from 'react';\nimport {exportModule as baseExportModule, renderApp as baseRenderApp, renderSSR as baseRenderSSR, getView, isPromiseView} from '@medux/core';\n\nimport {Provider} from 'react-redux';\n\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  historyProxy: HistoryProxy,\n  storeOptions: StoreOptions\n): Promise<void> {\n  return baseRenderApp(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: ComponentType<any>;\n      },\n      ssrInitStoreKey\n    ) => {\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      render(ReduxProvider, appViews.Main, ssrInitStoreKey);\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>) => any,\n  moduleGetter: M,\n  appModuleName: A,\n  historyProxy: HistoryProxy,\n  storeOptions: StoreOptions = {}\n) {\n  return baseRenderSSR(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType;\n      },\n      ssrInitStoreKey\n    ) => {\n      const data = store.getState();\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      return {\n        ssrInitStoreKey,\n        data,\n        html: render(ReduxProvider, appViews.Main),\n      };\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport const loadView: LoadView = (moduleGetter, moduleName, viewName, Loading?: ComponentType<any>) => {\n  const loader: FunctionComponent<any> = function Loader(props: any) {\n    const [view, setView] = useState<{Component: ComponentType} | null>(() => {\n      const moduleViewResult = getView<ComponentType>(moduleGetter, moduleName, viewName);\n      if (isPromiseView<ComponentType>(moduleViewResult)) {\n        moduleViewResult.then(Component => {\n          Object.keys(loader).forEach(key => (Component[key] = loader[key]));\n          Object.keys(Component).forEach(key => (loader[key] = Component[key]));\n          setView({Component});\n        });\n        return null;\n      } else {\n        Object.keys(loader).forEach(key => (moduleViewResult[key] = loader[key]));\n        Object.keys(moduleViewResult).forEach(key => (loader[key] = moduleViewResult[key]));\n        return {Component: moduleViewResult};\n      }\n    });\n    return view ? <view.Component {...props} /> : Loading ? <Loading {...props} /> : null;\n  };\n\n  return loader as any;\n};\n\nexport const exportModule: ExportModule<ComponentType<any>> = baseExportModule;\n"],"file":"index.js"}