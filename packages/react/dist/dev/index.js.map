{"version":3,"sources":["../../src/index.tsx"],"names":["React","useEffect","useState","exportModule","baseExportModule","renderApp","baseRenderApp","renderSSR","baseRenderSSR","getView","isPromiseView","isServer","viewWillMount","viewWillUnmount","Provider","render","moduleGetter","appModuleName","storeOptions","store","appModel","appViews","ssrInitStoreKey","ReduxProvider","props","children","Main","data","getState","html","autoID","loadView","moduleName","viewName","Loading","loader","onFocus","onBlur","Loader","moduleViewResult","Object","keys","forEach","key","Component","view","aid","then","setView","subscriptions","didFocus","didBlur","navigation","addListener","remove"],"mappings":"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","sourcesContent":["import {ExportModule, LoadView, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport React, {ComponentType, FunctionComponent, ReactNode, useEffect, useState} from 'react';\nimport {exportModule as baseExportModule, renderApp as baseRenderApp, renderSSR as baseRenderSSR, getView, isPromiseView, isServer, viewWillMount, viewWillUnmount} from '@medux/core';\n\nimport {Provider} from 'react-redux';\n\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions\n): Promise<void> {\n  return baseRenderApp(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: ComponentType<any>;\n      },\n      ssrInitStoreKey\n    ) => {\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      render(ReduxProvider, appViews.Main, ssrInitStoreKey);\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>) => any,\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions = {}\n) {\n  return baseRenderSSR(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType;\n      },\n      ssrInitStoreKey\n    ) => {\n      const data = store.getState();\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      return {\n        ssrInitStoreKey,\n        data,\n        html: render(ReduxProvider, appViews.Main),\n      };\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\nlet autoID = 0;\nexport const loadView: LoadView = (moduleGetter, moduleName, viewName, Loading?: ComponentType<any>) => {\n  let loader: FunctionComponent<any> = null as any;\n  if (isServer()) {\n    const onFocus = () => void 0;\n    const onBlur = () => void 0;\n    loader = function Loader(props: any) {\n      const [view] = useState<{Component: ComponentType} | null>(() => {\n        const moduleViewResult = getView<ComponentType>(moduleGetter, moduleName, viewName);\n        if (isPromiseView<ComponentType>(moduleViewResult)) {\n          return null;\n        } else {\n          Object.keys(loader).forEach(key => (moduleViewResult[key] = loader[key]));\n          Object.keys(moduleViewResult).forEach(key => (loader[key] = moduleViewResult[key]));\n          return {Component: moduleViewResult};\n        }\n      });\n      return view ? <view.Component {...props} onFocus={onFocus} onBlur={onBlur} /> : Loading ? <Loading {...props} /> : null;\n    };\n  } else {\n    const aid = autoID++;\n    const onFocus = () => viewWillMount(moduleName, viewName, aid + '');\n    const onBlur = () => viewWillUnmount(moduleName, viewName, aid + '');\n    loader = function Loader(props: any) {\n      const [view, setView] = useState<{Component: ComponentType} | null>(() => {\n        const moduleViewResult = getView<ComponentType>(moduleGetter, moduleName, viewName);\n        if (isPromiseView<ComponentType>(moduleViewResult)) {\n          moduleViewResult.then(Component => {\n            Object.keys(loader).forEach(key => (Component[key] = loader[key]));\n            Object.keys(Component).forEach(key => (loader[key] = Component[key]));\n            setView({Component});\n          });\n          return null;\n        } else {\n          Object.keys(loader).forEach(key => (moduleViewResult[key] = loader[key]));\n          Object.keys(moduleViewResult).forEach(key => (loader[key] = moduleViewResult[key]));\n          return {Component: moduleViewResult};\n        }\n      });\n      useEffect(() => {\n        if (view) {\n          let subscriptions: {didFocus: null | {remove: Function}; didBlur: null | {remove: Function}} = {didFocus: null, didBlur: null};\n          if (props.navigation) {\n            subscriptions.didFocus = props.navigation.addListener('didFocus', onFocus);\n            subscriptions.didBlur = props.navigation.addListener('didBlur', onBlur);\n          }\n          viewWillMount(moduleName, viewName, aid + '');\n\n          return () => {\n            subscriptions.didFocus && subscriptions.didFocus.remove();\n            subscriptions.didBlur && subscriptions.didBlur.remove();\n            viewWillUnmount(moduleName, viewName, aid + '');\n          };\n        } else {\n          return void 0;\n        }\n      }, [view]);\n      return view ? <view.Component {...props} onFocus={onFocus} onBlur={onBlur} /> : Loading ? <Loading {...props} /> : null;\n    };\n  }\n  return loader as any;\n};\n\nexport const exportModule: ExportModule<ComponentType<any>> = baseExportModule;\n"],"file":"index.js"}