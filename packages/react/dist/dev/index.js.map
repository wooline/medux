{"version":3,"sources":["../../src/index.tsx"],"names":["React","useState","useEffect","ReactDOM","renderToNodeStream","renderToString","Provider","createBrowserHistory","createMemoryHistory","withRouter","ConnectedRouter","connectRouter","routerMiddleware","renderApp","renderSSR","getView","isPromiseView","viewWillMount","viewWillUnmount","isServer","getClientStore","buildApp","moduleGetter","appModuleName","storeOptions","container","history","reducers","router","Error","state","action","routerData","routerParser","middlewares","unshift","store","appModel","appViews","ssrInitStoreKey","WithRouter","Main","app","render","window","hydrate","document","getElementById","buildSSR","initialEntries","renderToStream","data","getState","html","loadView","moduleName","viewName","loadingComponent","Loading","props","moduleViewResult","then","view","setComponent","Component","exportView","ComponentView","model","View","modelReady","setModelReady"],"mappings":"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","sourcesContent":["import React, {ReactElement, ComponentType, useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {renderToNodeStream, renderToString} from 'react-dom/server';\nimport {Provider} from 'react-redux';\nimport {createBrowserHistory} from 'history';\nimport createMemoryHistory from 'history/createMemoryHistory';\nimport {withRouter} from 'react-router-dom';\nimport {ConnectedRouter, connectRouter, routerMiddleware} from 'connected-react-router';\nimport {renderApp, renderSSR, getView, isPromiseView, viewWillMount, viewWillUnmount, isServer, getClientStore} from '@medux/core';\nimport {ModuleGetter, StoreOptions, LoadView, ExportView} from '@medux/core/types/export';\n\nexport type RouterParser<T = any> = (nextRouter: T, prevRouter?: T) => T;\n\nexport function buildApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions & {routerParser?: RouterParser} = {},\n  container: string | Element | ((component: ReactElement<any>) => void) = 'root'\n): Promise<void> {\n  const history = createBrowserHistory();\n  storeOptions.reducers = storeOptions.reducers || {};\n  if (storeOptions.reducers && storeOptions.reducers.router) {\n    throw new Error(\"the reducer name 'router' is not allowed\");\n  }\n  const router = connectRouter(history);\n  storeOptions.reducers.router = (state, action) => {\n    const routerData = router(state.router, action as any);\n    if (storeOptions.routerParser && state.router !== routerData) {\n      state.router = storeOptions.routerParser(routerData, state.router);\n    } else {\n      state.router = routerData;\n    }\n  };\n  storeOptions.middlewares = storeOptions.middlewares || [];\n  storeOptions.middlewares.unshift(routerMiddleware(history));\n\n  return renderApp(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType<any>;\n      },\n      ssrInitStoreKey\n    ) => {\n      const WithRouter = withRouter(appViews.Main);\n      const app = (\n        <Provider store={store}>\n          <ConnectedRouter history={history}>\n            <WithRouter />\n          </ConnectedRouter>\n        </Provider>\n      );\n      if (typeof container === 'function') {\n        container(app);\n      } else {\n        const render = window[ssrInitStoreKey] ? ReactDOM.hydrate : ReactDOM.render;\n        render(app, typeof container === 'string' ? document.getElementById(container) : container);\n      }\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport function buildSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  initialEntries: string[],\n  storeOptions: StoreOptions & {routerParser?: RouterParser} = {},\n  renderToStream: boolean = false\n): Promise<{html: string | ReadableStream; data: any; ssrInitStoreKey: string}> {\n  const history = createMemoryHistory({initialEntries});\n  storeOptions.reducers = storeOptions.reducers || {};\n  if (storeOptions.reducers && storeOptions.reducers.router) {\n    throw new Error(\"the reducer name 'router' is not allowed\");\n  }\n  const router = connectRouter(history);\n  storeOptions.reducers.router = (state, action) => {\n    const routerData = router(state.router, action as any);\n    if (storeOptions.routerParser && state.router !== routerData) {\n      state.router = storeOptions.routerParser(routerData, state.router);\n    } else {\n      state.router = routerData;\n    }\n  };\n  storeOptions.middlewares = storeOptions.middlewares || [];\n  storeOptions.middlewares.unshift(routerMiddleware(history));\n  const render = renderToStream ? renderToNodeStream : renderToString;\n  return renderSSR(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType;\n      },\n      ssrInitStoreKey\n    ) => {\n      const data = store.getState();\n      return {\n        ssrInitStoreKey,\n        data,\n        html: render(\n          <Provider store={store}>\n            <ConnectedRouter history={history}>\n              <appViews.Main />\n            </ConnectedRouter>\n          </Provider>\n        ),\n      };\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport const loadView: LoadView = (moduleGetter, moduleName, viewName, loadingComponent: React.ReactNode = null) => {\n  return function Loading(props: any) {\n    const [Component, setComponent] = useState<ComponentType | null>(() => {\n      const moduleViewResult = getView(moduleGetter[moduleName], viewName);\n      if (isPromiseView<ComponentType>(moduleViewResult)) {\n        moduleViewResult.then(view => {\n          setComponent(view);\n        });\n        return null;\n      } else {\n        return moduleViewResult;\n      }\n    });\n    return Component ? <Component {...props} /> : loadingComponent;\n  } as any;\n};\nexport const exportView: ExportView<ComponentType> = (ComponentView, model, viewName) => {\n  if (isServer()) {\n    return ComponentView;\n  } else {\n    return function View(props) {\n      const [modelReady, setModelReady] = useState(() => {\n        const state = getClientStore().getState();\n        const moduleName = model.moduleName;\n        model(getClientStore()).then(() => {\n          if (!modelReady) {\n            setModelReady(true);\n          }\n        });\n        return !!state[moduleName];\n      });\n      useEffect(() => {\n        viewWillMount(model.moduleName, viewName);\n        return () => {\n          viewWillUnmount(model.moduleName, viewName);\n        };\n      }, []);\n      return modelReady ? <ComponentView {...props} /> : null;\n    };\n  }\n};\n"],"file":"index.js"}