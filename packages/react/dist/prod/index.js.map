{"version":3,"sources":["../../src/index.tsx"],"names":["React","useEffect","useState","exportModule","baseExportModule","renderApp","baseRenderApp","renderSSR","baseRenderSSR","getView","isPromiseView","viewWillMount","viewWillUnmount","Provider","render","moduleGetter","appModuleName","storeOptions","store","appModel","appViews","ssrInitStoreKey","ReduxProvider","props","children","Main","data","getState","html","loadView","moduleName","viewName","Loading","onFocus","onBlur","loader","moduleViewResult","then","Component","Object","keys","forEach","key","setView","view","subscriptions","didFocus","didBlur","navigation","addListener","remove"],"mappings":"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","sourcesContent":["import {ExportModule, LoadView, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport React, {ComponentType, FunctionComponent, ReactNode, useEffect, useState} from 'react';\nimport {exportModule as baseExportModule, renderApp as baseRenderApp, renderSSR as baseRenderSSR, getView, isPromiseView, viewWillMount, viewWillUnmount} from '@medux/core';\n\nimport {Provider} from 'react-redux';\n\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions\n): Promise<void> {\n  return baseRenderApp(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: ComponentType<any>;\n      },\n      ssrInitStoreKey\n    ) => {\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      render(ReduxProvider, appViews.Main, ssrInitStoreKey);\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>) => any,\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions = {}\n) {\n  return baseRenderSSR(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType;\n      },\n      ssrInitStoreKey\n    ) => {\n      const data = store.getState();\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      return {\n        ssrInitStoreKey,\n        data,\n        html: render(ReduxProvider, appViews.Main),\n      };\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport const loadView: LoadView = (moduleGetter, moduleName, viewName, Loading?: ComponentType<any>) => {\n  const onFocus = () => viewWillMount(moduleName, viewName);\n  const onBlur = () => viewWillUnmount(moduleName, viewName);\n  const loader: FunctionComponent<any> = function Loader(props: any) {\n    const [view, setView] = useState<{Component: ComponentType} | null>(() => {\n      const moduleViewResult = getView<ComponentType>(moduleGetter, moduleName, viewName);\n      if (isPromiseView<ComponentType>(moduleViewResult)) {\n        moduleViewResult.then(Component => {\n          Object.keys(loader).forEach(key => (Component[key] = loader[key]));\n          Object.keys(Component).forEach(key => (loader[key] = Component[key]));\n          setView({Component});\n        });\n        return null;\n      } else {\n        Object.keys(loader).forEach(key => (moduleViewResult[key] = loader[key]));\n        Object.keys(moduleViewResult).forEach(key => (loader[key] = moduleViewResult[key]));\n        return {Component: moduleViewResult};\n      }\n    });\n    useEffect(() => {\n      if (view) {\n        let subscriptions: {didFocus: null | {remove: Function}; didBlur: null | {remove: Function}} = {didFocus: null, didBlur: null};\n        if (props.navigation) {\n          subscriptions.didFocus = props.navigation.addListener('didFocus', onFocus);\n          subscriptions.didBlur = props.navigation.addListener('didBlur', onBlur);\n        }\n        onFocus();\n\n        return () => {\n          subscriptions.didFocus && subscriptions.didFocus.remove();\n          subscriptions.didBlur && subscriptions.didBlur.remove();\n          onBlur();\n        };\n      } else {\n        return void 0;\n      }\n    }, [view]);\n    return view ? <view.Component {...props} onFocus={onFocus} onBlur={onBlur} /> : Loading ? <Loading {...props} /> : null;\n  };\n\n  return loader as any;\n};\n\nexport const exportModule: ExportModule<ComponentType<any>> = baseExportModule;\n"],"file":"index.js"}