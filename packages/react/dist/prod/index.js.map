{"version":3,"sources":["../../src/index.tsx"],"names":["ConnectedRouter","connectRouter","routerMiddleware","React","useEffect","useState","exportModule","baseExportModule","getView","invalidview","isPromiseView","renderApp","renderSSR","viewWillMount","viewWillUnmount","createBrowserHistory","createMemoryHistory","renderToNodeStream","renderToString","Provider","ReactDOM","withRouter","buildApp","moduleGetter","appModuleName","storeOptions","container","history","reducers","router","Error","state","action","routerData","routerParser","routerInited","middlewares","unshift","filterRouter","next","type","store","appModel","appViews","ssrInitStoreKey","WithRouter","Main","app","render","window","hydrate","document","getElementById","buildSSR","initialEntries","renderToStream","data","getState","html","loadView","moduleName","viewName","Loading","loader","props","moduleViewResult","then","Component","propTypes","contextTypes","defaultProps","setView","view"],"mappings":"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","sourcesContent":["import {RootState as BaseRootState, ExportModule, LoadView, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport {ConnectedRouter, RouterState, connectRouter, routerMiddleware} from 'connected-react-router';\nimport React, {ComponentType, FunctionComponent, ReactElement, useEffect, useState} from 'react';\nimport {exportModule as baseExportModule, getView, invalidview, isPromiseView, renderApp, renderSSR, viewWillMount, viewWillUnmount} from '@medux/core';\nimport {createBrowserHistory, createMemoryHistory} from 'history';\nimport {renderToNodeStream, renderToString} from 'react-dom/server';\n\nimport {Provider} from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport {withRouter} from 'react-router-dom';\n\nexport type RouterParser<T = any> = (nextRouter: T, prevRouter?: T) => T;\n\nexport function buildApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions & {routerParser?: RouterParser} = {},\n  container: string | Element | ((component: ReactElement<any>) => void) = 'root'\n): Promise<void> {\n  const history = createBrowserHistory();\n  storeOptions.reducers = storeOptions.reducers || {};\n  if (storeOptions.reducers && storeOptions.reducers.router) {\n    throw new Error(\"the reducer name 'router' is not allowed\");\n  }\n  const router = connectRouter(history);\n  storeOptions.reducers.router = (state, action) => {\n    const routerData = router(state, action as any);\n    if (storeOptions.routerParser && state !== routerData) {\n      return storeOptions.routerParser(routerData, state);\n    } else {\n      return routerData;\n    }\n  };\n  // SSR需要数据是单向的，store->view，不能store->view->store->view，而view:ConnectedRouter初始化时会触发一次LOCATION_CHANGE\n  let routerInited = false;\n  const filterRouter = () => (next: Function) => (action: {type: string}) => {\n    if (action.type === '@@router/LOCATION_CHANGE') {\n      if (!routerInited) {\n        routerInited = true;\n        return action;\n      } else {\n        invalidview();\n      }\n    }\n    return next(action);\n  };\n  storeOptions.middlewares = storeOptions.middlewares || [];\n  storeOptions.middlewares.unshift(filterRouter, routerMiddleware(history));\n\n  return renderApp(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType<any>;\n      },\n      ssrInitStoreKey\n    ) => {\n      const WithRouter = withRouter(appViews.Main);\n      const app = (\n        <Provider store={store}>\n          <ConnectedRouter history={history}>\n            <WithRouter />\n          </ConnectedRouter>\n        </Provider>\n      );\n      if (typeof container === 'function') {\n        container(app);\n      } else {\n        const render = window[ssrInitStoreKey] ? ReactDOM.hydrate : ReactDOM.render;\n        render(app, typeof container === 'string' ? document.getElementById(container) : container);\n      }\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport function buildSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  moduleGetter: M,\n  appModuleName: A,\n  initialEntries: string[],\n  storeOptions: StoreOptions & {routerParser?: RouterParser} = {},\n  renderToStream: boolean = false\n): Promise<{html: string | ReadableStream; data: any; ssrInitStoreKey: string}> {\n  const history = createMemoryHistory({initialEntries});\n  storeOptions.reducers = storeOptions.reducers || {};\n  if (storeOptions.reducers && storeOptions.reducers.router) {\n    throw new Error(\"the reducer name 'router' is not allowed\");\n  }\n  const router = connectRouter(history);\n  storeOptions.reducers.router = (state, action) => {\n    const routerData = router(state.router, action as any);\n    if (storeOptions.routerParser && state.router !== routerData) {\n      state.router = storeOptions.routerParser(routerData, state.router);\n    } else {\n      state.router = routerData;\n    }\n  };\n  let routerInited = false;\n  const filterRouter = () => (next: Function) => (action: {type: string}) => {\n    if (action.type === '@@router/LOCATION_CHANGE') {\n      if (!routerInited) {\n        routerInited = true;\n        return action;\n      } else {\n        invalidview();\n      }\n    }\n    return next(action);\n  };\n  storeOptions.middlewares = storeOptions.middlewares || [];\n  storeOptions.middlewares.unshift(filterRouter, routerMiddleware(history));\n  const render = renderToStream ? renderToNodeStream : renderToString;\n  return renderSSR(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType;\n      },\n      ssrInitStoreKey\n    ) => {\n      const data = store.getState();\n      return {\n        ssrInitStoreKey,\n        data,\n        html: render(\n          <Provider store={store}>\n            <ConnectedRouter history={history}>\n              <appViews.Main />\n            </ConnectedRouter>\n          </Provider>\n        ),\n      };\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport const loadView: LoadView = (moduleGetter, moduleName, viewName, Loading?: ComponentType<any>) => {\n  const loader: FunctionComponent<any> = function Loader(props: any) {\n    const [view, setView] = useState<{Component: ComponentType} | null>(() => {\n      const moduleViewResult = getView<ComponentType>(moduleGetter, moduleName, viewName);\n      if (isPromiseView<ComponentType>(moduleViewResult)) {\n        moduleViewResult.then(Component => {\n          loader.propTypes = Component.propTypes;\n          loader.contextTypes = Component.contextTypes;\n          loader.defaultProps = Component.defaultProps;\n          setView({Component});\n        });\n        return null;\n      } else {\n        loader.propTypes = moduleViewResult.propTypes;\n        loader.contextTypes = moduleViewResult.contextTypes;\n        loader.defaultProps = moduleViewResult.defaultProps;\n        return {Component: moduleViewResult};\n      }\n    });\n    useEffect(() => {\n      if (view) {\n        viewWillMount(moduleName, viewName);\n        return () => {\n          viewWillUnmount(moduleName, viewName);\n        };\n      } else {\n        return void 0;\n      }\n    }, [view]);\n    return view ? <view.Component {...props} /> : Loading ? <Loading {...props} /> : null;\n  };\n  return loader as any;\n};\n\nexport const exportModule: ExportModule<ComponentType<any>> = baseExportModule;\n\nexport type RootState<G extends ModuleGetter = {}, R = RouterState> = BaseRootState<G> & {router: R};\n"],"file":"index.js"}