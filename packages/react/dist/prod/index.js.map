{"version":3,"sources":["../../src/index.tsx"],"names":["React","exportModule","baseExportModule","renderApp","baseRenderApp","renderSSR","baseRenderSSR","getView","isPromiseView","Provider","render","moduleGetter","appModuleName","historyProxy","storeOptions","store","appModel","appViews","ssrInitStoreKey","ReduxProvider","props","children","Main","data","getState","html","loadView","moduleName","viewName","Loading","Component","componentDidMount","moduleViewResult","then","Object","keys","Loader","forEach","key","setState","state"],"mappings":"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","sourcesContent":["import {ExportModule, HistoryProxy, LoadView, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport React, {ComponentType, ReactNode} from 'react';\nimport {exportModule as baseExportModule, renderApp as baseRenderApp, renderSSR as baseRenderSSR, getView, isPromiseView} from '@medux/core';\n\nimport {Provider} from 'react-redux';\n\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: any, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  historyProxy: HistoryProxy,\n  storeOptions: StoreOptions\n): Promise<void> {\n  return baseRenderApp(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: ComponentType<any>;\n      },\n      ssrInitStoreKey\n    ) => {\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      render(ReduxProvider, appViews.Main, ssrInitStoreKey);\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\n\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>) => any,\n  moduleGetter: M,\n  appModuleName: A,\n  historyProxy: HistoryProxy,\n  storeOptions: StoreOptions = {}\n) {\n  return baseRenderSSR(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType;\n      },\n      ssrInitStoreKey\n    ) => {\n      const data = store.getState();\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      return {\n        ssrInitStoreKey,\n        data,\n        html: render(ReduxProvider, appViews.Main),\n      };\n    },\n    moduleGetter,\n    appModuleName,\n    historyProxy,\n    storeOptions\n  );\n}\ninterface LoadViewState {\n  Component: ComponentType<any> | null;\n}\nexport const loadView: LoadView = (moduleGetter, moduleName, viewName, Loading?: ComponentType<any>) => {\n  return class Loader extends React.Component {\n    public state: LoadViewState = {\n      Component: null,\n    };\n    public componentDidMount() {\n      const moduleViewResult = getView<ComponentType>(moduleGetter, moduleName, viewName);\n      if (isPromiseView<ComponentType>(moduleViewResult)) {\n        moduleViewResult.then(Component => {\n          Object.keys(Loader).forEach(key => (Component[key] = Loader[key]));\n          Object.keys(Component).forEach(key => (Loader[key] = Component[key]));\n          this.setState({\n            Component,\n          });\n        });\n      } else {\n        Object.keys(Loader).forEach(key => (moduleViewResult[key] = Loader[key]));\n        Object.keys(moduleViewResult).forEach(key => (Loader[key] = moduleViewResult[key]));\n        this.setState({\n          Component: moduleViewResult,\n        });\n      }\n    }\n    public render() {\n      const {Component} = this.state;\n      return Component ? <Component {...this.props} /> : Loading ? <Loading {...this.props} /> : null;\n    }\n  } as any;\n};\n\nexport const exportModule: ExportModule<ComponentType<any>> = baseExportModule;\n"],"file":"index.js"}