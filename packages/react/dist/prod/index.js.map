{"version":3,"sources":["../../src/index.tsx"],"names":["React","useEffect","useState","exportModule","baseExportModule","renderApp","baseRenderApp","renderSSR","baseRenderSSR","getView","isPromiseView","viewWillMount","viewWillUnmount","Provider","render","moduleGetter","appModuleName","storeOptions","store","appModel","appViews","ssrInitStoreKey","ReduxProvider","props","children","Main","data","getState","html","loadView","moduleName","viewName","Loading","loader","moduleViewResult","then","Component","propTypes","contextTypes","defaultProps","setView","view"],"mappings":"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","sourcesContent":["import {ExportModule, LoadView, ModuleGetter, StoreOptions} from '@medux/core/types/export';\nimport React, {ComponentType, FunctionComponent, ReactNode, useEffect, useState} from 'react';\nimport {exportModule as baseExportModule, renderApp as baseRenderApp, renderSSR as baseRenderSSR, getView, isPromiseView, viewWillMount, viewWillUnmount} from '@medux/core';\n\nimport {Provider} from 'react-redux';\n\nexport function renderApp<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>, ssrInitStoreKey: string) => void,\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions\n): Promise<void> {\n  return baseRenderApp(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: ComponentType<any>;\n      },\n      ssrInitStoreKey\n    ) => {\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      render(ReduxProvider, appViews.Main, ssrInitStoreKey);\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport function renderSSR<M extends ModuleGetter, A extends Extract<keyof M, string>>(\n  render: (Provider: ComponentType<{children: ReactNode}>, AppMainView: ComponentType<any>) => any,\n  moduleGetter: M,\n  appModuleName: A,\n  storeOptions: StoreOptions = {}\n) {\n  return baseRenderSSR(\n    (\n      store,\n      appModel,\n      appViews: {\n        [key: string]: React.ComponentType;\n      },\n      ssrInitStoreKey\n    ) => {\n      const data = store.getState();\n      const ReduxProvider: ComponentType<{children: ReactNode}> = props => {\n        // eslint-disable-next-line react/prop-types\n        return <Provider store={store}>{props.children}</Provider>;\n      };\n      return {\n        ssrInitStoreKey,\n        data,\n        html: render(ReduxProvider, appViews.Main),\n      };\n    },\n    moduleGetter,\n    appModuleName,\n    storeOptions\n  );\n}\n\nexport const loadView: LoadView = (moduleGetter, moduleName, viewName, Loading?: ComponentType<any>) => {\n  const loader: FunctionComponent<any> = function Loader(props: any) {\n    const [view, setView] = useState<{Component: ComponentType} | null>(() => {\n      const moduleViewResult = getView<ComponentType>(moduleGetter, moduleName, viewName);\n      if (isPromiseView<ComponentType>(moduleViewResult)) {\n        moduleViewResult.then(Component => {\n          loader.propTypes = Component.propTypes;\n          loader.contextTypes = Component.contextTypes;\n          loader.defaultProps = Component.defaultProps;\n          setView({Component});\n        });\n        return null;\n      } else {\n        loader.propTypes = moduleViewResult.propTypes;\n        loader.contextTypes = moduleViewResult.contextTypes;\n        loader.defaultProps = moduleViewResult.defaultProps;\n        return {Component: moduleViewResult};\n      }\n    });\n    useEffect(() => {\n      if (view) {\n        viewWillMount(moduleName, viewName);\n        return () => {\n          viewWillUnmount(moduleName, viewName);\n        };\n      } else {\n        return void 0;\n      }\n    }, [view]);\n    return view ? <view.Component {...props} /> : Loading ? <Loading {...props} /> : null;\n  };\n  return loader as any;\n};\n\nexport const exportModule: ExportModule<ComponentType<any>> = baseExportModule;\n"],"file":"index.js"}